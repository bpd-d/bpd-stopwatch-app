{"version":3,"sources":["webpack:///./src/ui/components/common/GoBack.tsx","webpack:///./src/ui/components/common/NotFound.tsx","webpack:///./src/api/screen/screen.ts","webpack:///./src/api/stopwatch/stopwatch.ts","webpack:///./src/ui/hooks/useResize.tsx","webpack:///./src/ui/components/perform/TrainingSoundPlayer.tsx","webpack:///./src/ui/hooks/AudioContext.ts","webpack:///./src/ui/components/common/IconButton.tsx","webpack:///./src/ui/components/perform/PerformButtonBar.tsx","webpack:///./src/ui/components/perform/countdown/CountdownTimers.tsx","webpack:///./src/ui/components/perform/PerformTraining.tsx","webpack:///./src/ui/hooks/loading.tsx","webpack:///./src/ui/components/perform/hook.tsx","webpack:///./src/ui/components/perform/countdown/functions.tsx","webpack:///./src/ui/hooks/settings.tsx"],"names":["withRouter","props","history","className","onClick","goBack","NotFound","classes","message","to","KeepAwakeToggle","this","screen","keepAwake","LoopLockScreen","element","undefined","createElement","document","body","appendChild","remove","src","newEl","autoplay","muted","loop","classList","add","textContent","KeepScreenAwakeFeature","getToggle","activate","release","StopWatchStateOptions","StopWatch","callback","setTimeout","tick","stop","e","console","error","finish","clearTimeout","useIsFullscreen","onResize","React","window","addEventListener","removeEventListener","useResize","is","setIsFullscreen","isElementFullscreen","isFullscreen","clientHeight","availHeight","height","clientWidth","availWidth","width","TrainingSoundPlayer","countdownSound","exerciseSound","warmupSound","breakSound","cooldownSound","endSound","endSoundTrack","countdownSoundTrack","exerciseSoundTrack","warmupSoundTrack","breakSoundTrack","cooldownSoundTrack","AudioContext","playSound","type","current","currentTime","resume","play","createMediaElementSource","connect","destination","children","createArray","map","child","ref","id","IconButton","modifiers","cui-icon","icon","PerformerButtonBar","startBtnText","startBtnCls","pauseBtnText","isPauseVisible","startBtnIcon","pauseBtnIcon","controls","setControls","state","updatePlayStateControls","playState","soundIcon","onMute","onPauseResume","onStartStop","fullscreenIcon","onFullScreen","CountDownTimer","watchState","round","name","roundIdx","roundTotal","cui-circle-progress","trainingProgress","roundProgress","progress","actionIdx","timerCls","timer","NewCountDownTimer","value","max","SimpleCountDownTimer","getTextClassByActionType","action","actionTotal","calcDisplayTimer","SimpleExtCountDownTimer","PerfromTraining","init","loading","training","setState","flag","log","isLoading","setIsLoading","notFound","setNotFound","useParams","onGetTraining","validation","CompleteTrainingValidator","validate","status","showMessage","errors","join","setPageTitle","getTrainingSubscription","$flow","subscribe","perform","unsubscribe","Loading","PerformTrainingElement","errorMessage","setErrorMessage","wakeLock","setNavbarTitle","TrainingPerformer","key","callError","cui-tooltip","stopwatch","setStopwatch","onTick","useStopwatch2","setOnTick","roundDuration","totalDuration","setWatchState","useSettings","settings","setSettings","stopWatchRef","watchStateRef","settingsRef","mainViewRef","setDefaultWatchState","rounds","actions","length","calculateDuration","getTotalDuration","onStopwatchTick","total","actionDuration","parseInt","duration","ct","calculateProgress","updateStopWatchState","getState","time","nextActionIdx","newAction","nextRoundIdx","newRound","setNextAction","reset","soundEnabled","watchstate","timeData","reduce","result","act","idx","calculateRoundCurrentTime","trainginProgress","calculateTrainingProgress","getBgClassByType","getCountDownTimer","countdownView","closeFullscreen","openFullscreen","start","pause","DefaultSettings","onSaveSettings","$settingsFlow","SETTINGS_FLOW_ACTIONS","GET_SETTINGS","onGetSettings","setDarkMode","darkMode","settingsSub","settingsUpdateSub","SET_SETTINGS"],"mappings":"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","file":"stopwatch.chunk.8.f09265e3fe7bb8026382.js","sourcesContent":["import * as React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction GoBack(props: any) {\r\n    const { history } = props;\r\n    return (<button className=\"cui-button cui-accent\" onClick={() => history.goBack()}>Go Back</button>)\r\n}\r\n\r\n\r\nexport default withRouter(GoBack);","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GoBack from \"./GoBack\";\r\n\r\nexport interface NotFoundProps {\r\n    message: string;\r\n    classes?: string;\r\n    goBack?: boolean;\r\n}\r\n\r\nexport function NotFound(props: NotFoundProps) {\r\n    return (<div className={props.classes}>\r\n        <div>\r\n            <h2 className=\"cui-h2 cui-text-center cui-text-error\">{props.message}</h2>\r\n            <div className=\"\">\r\n                <div className=\"cui-flex cui-center\">\r\n                    <Link to=\"/\" className=\"cui-button cui-margin-small-right\">Go Home</Link>\r\n                    {props.goBack ?? <GoBack />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","interface KeepScreenToggle {\r\n    activate(): void;\r\n    release(): void;\r\n}\r\n\r\nexport class KeepAwakeToggle implements KeepScreenToggle {\r\n    #screen: any;\r\n    constructor() {\r\n        this.#screen = screen;\r\n    }\r\n\r\n    activate() {\r\n        this.#screen.keepAwake = true;\r\n    }\r\n\r\n    release(): void {\r\n        this.#screen.keepAwake = false;\r\n    }\r\n\r\n}\r\n\r\nexport class WakeLockScreen implements KeepScreenToggle {\r\n    wakeLockRequest: any;\r\n\r\n    activate() {\r\n        let nav = navigator as any;\r\n        nav.wakeLock.request('screen').then((wakelock: any) => {\r\n            this.wakeLockRequest = wakelock;\r\n            console.log(\"Wakelock activated\");\r\n        })\r\n    }\r\n\r\n    release() {\r\n        if (this.wakeLockRequest) {\r\n            this.wakeLockRequest.release();\r\n            this.wakeLockRequest = null;\r\n            console.log(\"Wakelock deactivated\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class LoopLockScreen implements KeepScreenToggle {\r\n    element: Element | undefined;\r\n\r\n    constructor() {\r\n        this.element = undefined;\r\n    }\r\n\r\n    activate(): void {\r\n        if (this.element) {\r\n            return;\r\n        }\r\n        this.element = this.createElement(\"/static/video/Screen.mp4\");\r\n        document.body.appendChild(this.element);\r\n    }\r\n\r\n    release(): void {\r\n        if (!this.element) {\r\n            return;\r\n        }\r\n        this.element.remove();\r\n        this.element = undefined;\r\n    }\r\n\r\n    private createElement(src: string): Element {\r\n        let newEl = document.createElement(\"video\");\r\n        newEl.autoplay = true;\r\n        newEl.muted = true;\r\n        newEl.loop = true;\r\n        newEl.src = src;\r\n        newEl.classList.add('loop-screen')\r\n        newEl.textContent = \"Not Supported\";\r\n        return newEl;\r\n    }\r\n\r\n}\r\n\r\nexport class KeepScreenAwakeFeature {\r\n    #toggle: KeepScreenToggle;\r\n\r\n    constructor() {\r\n        this.#toggle = this.getToggle();\r\n    }\r\n    activate() {\r\n        this.#toggle.activate();\r\n    }\r\n    release() {\r\n        this.#toggle.release();\r\n    }\r\n    private getToggle() {\r\n        if ('keepAwake' in screen) {\r\n            return new KeepAwakeToggle();\r\n        } else {\r\n            return new LoopLockScreen();\r\n            //return new WakeLockScreen();\r\n        }\r\n    }\r\n}","export const StopWatchStateOptions: any = {\r\n    RUNNING: \"RUNNING\",\r\n    STOPPED: \"STOPPED\",\r\n    PAUSED: \"PAUSED\",\r\n}\r\n\r\nexport type StopWatchPerformState = \"RUNNING\" | 'PAUSED' | \"STOPPED\";\r\n\r\nexport interface StopwatchCallback {\r\n    (current: number, total: number, stopWatch: StopWatch): boolean;\r\n}\r\n\r\nexport interface IStopWatch {\r\n    start(): boolean;\r\n    stop(): boolean;\r\n    pause(): boolean;\r\n    resume(): boolean;\r\n    finish(): void;\r\n    getState(): StopWatchPerformState;\r\n}\r\n\r\nexport class StopWatch implements IStopWatch {\r\n    #callback: StopwatchCallback;\r\n    #current: number;\r\n    #total: number;\r\n    #isReset: boolean;\r\n    #state: StopWatchPerformState;\r\n    #id: any;\r\n    constructor() {\r\n        this.#current = 0;\r\n        this.#total = 0;\r\n        this.#isReset = false;\r\n        this.#state = StopWatchStateOptions.STOPPED;\r\n        this.#id = undefined;\r\n    }\r\n\r\n    onTick(callback: StopwatchCallback) {\r\n        this.#callback = callback;\r\n    }\r\n\r\n    tick() {\r\n        this.#id = setTimeout(() => {\r\n            try {\r\n                if (this.#state === StopWatchStateOptions.RUNNING && this.#callback && this.#callback(this.#current, this.#total, this)) {\r\n                    if (this.#isReset) {\r\n                        this.#current = 0;\r\n                        this.#isReset = false;\r\n                    } else {\r\n                        this.#current += 1;\r\n                        this.#total += 1;\r\n                    }\r\n                    this.tick();\r\n                } else if (this.#state !== StopWatchStateOptions.PAUSED) {\r\n                    this.stop();\r\n                }\r\n            } catch (e) {\r\n                console.error(\"An error occured on stopwatch tick\")\r\n                console.error(e)\r\n                this.stop();\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    reset() {\r\n        this.#isReset = true;\r\n    }\r\n\r\n    start(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            return false;\r\n        }\r\n        this.#current = 0;\r\n        this.#state = StopWatchStateOptions.RUNNING;\r\n        this.tick();\r\n        return true;\r\n    }\r\n\r\n    stop(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            this.finish();\r\n            this.#state = StopWatchStateOptions.STOPPED;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    pause(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            this.#state = StopWatchStateOptions.PAUSED;\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    resume() {\r\n        if (this.#state === StopWatchStateOptions.PAUSED) {\r\n            this.#state = StopWatchStateOptions.RUNNING;\r\n            this.tick();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    finish(): void {\r\n        if (this.#id) {\r\n            clearTimeout(this.#id);\r\n            this.#id = undefined;\r\n        }\r\n        this.#current = 0;\r\n        this.#total = 0;\r\n    }\r\n    getState() {\r\n        return this.#state;\r\n    }\r\n}","import { is } from 'bpd-toolkit/dist/esm/index'\r\nimport * as React from 'react'\r\n\r\nexport function useResize(element: Element | Window, callback: (element: Element | Window) => void) {\r\n    function onResize() {\r\n        if (callback && element) {\r\n            callback(element)\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (element) {\r\n            window.addEventListener('resize', onResize)\r\n        }\r\n\r\n        return () => {\r\n            if (element) {\r\n                window.removeEventListener('resize', onResize)\r\n            }\r\n\r\n        }\r\n    }, [element])\r\n}\r\n\r\n\r\nexport function useIsFullscreen(element: Element) {\r\n    const resizeEl = useResize(element, onResize)\r\n    const [isFullscreen, setIsFullscreen] = React.useState(isElementFullscreen(element));\r\n\r\n    function onResize(element: Element) {\r\n        if (is(element))\r\n            setIsFullscreen(isElementFullscreen(element))\r\n    }\r\n\r\n    function isElementFullscreen(element: Element) {\r\n        if (!is(element)) {\r\n            return false;\r\n        }\r\n        return element && element.clientHeight >= ((screen.availHeight || screen.height) - 30) && element.clientWidth >= ((screen.availWidth || screen.width) - 30)\r\n    }\r\n\r\n    React.useEffect(() => { }, [isFullscreen])\r\n    return isFullscreen\r\n}\r\n","import * as React from 'react'\r\nimport { useAudioContext } from '../../../ui/hooks/AudioContext';\r\nimport { createArray } from '../../../core/helpers';\r\n\r\nexport interface TrainingSoundPlayerProps {\r\n    children?: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport function TrainingSoundPlayer(props: TrainingSoundPlayerProps) {\r\n    const countdownSound = React.useRef(null);\r\n    const exerciseSound = React.useRef(null);\r\n    const warmupSound = React.useRef(null);\r\n    const breakSound = React.useRef(null);\r\n    const cooldownSound = React.useRef(null);\r\n    const endSound = React.useRef(null);\r\n    const endSoundTrack = React.useRef(null);\r\n    const countdownSoundTrack = React.useRef(null);\r\n    const exerciseSoundTrack = React.useRef(null);\r\n    const warmupSoundTrack = React.useRef(null);\r\n    const breakSoundTrack = React.useRef(null);\r\n    const cooldownSoundTrack = React.useRef(null);\r\n    const AudioContext = useAudioContext();\r\n\r\n    function playSound(type: string) {\r\n        let element = undefined;\r\n        switch (type) {\r\n            case \"countdown\":\r\n                element = countdownSound.current;\r\n                break;\r\n            case \"end\":\r\n                element = endSound.current;\r\n                break;\r\n            case \"exercise\":\r\n                element = exerciseSound.current;\r\n                break;\r\n            case \"warmup\":\r\n                element = warmupSound.current;\r\n                break;\r\n            case \"break\":\r\n                element = breakSound.current;\r\n                break;\r\n            case \"cooldown\":\r\n                element = cooldownSound.current;\r\n                break;\r\n\r\n        }\r\n        if (element) {\r\n            element.currentTime = 0;\r\n            AudioContext.resume();\r\n            element.play();\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (countdownSound.current) {\r\n            countdownSoundTrack.current = AudioContext.createMediaElementSource(countdownSound.current);\r\n            countdownSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (warmupSound.current) {\r\n            warmupSoundTrack.current = AudioContext.createMediaElementSource(warmupSound.current);\r\n            warmupSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (exerciseSound.current) {\r\n            exerciseSoundTrack.current = AudioContext.createMediaElementSource(exerciseSound.current);\r\n            exerciseSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (breakSound.current) {\r\n            breakSoundTrack.current = AudioContext.createMediaElementSource(breakSound.current);\r\n            breakSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (cooldownSound.current) {\r\n            cooldownSoundTrack.current = AudioContext.createMediaElementSource(cooldownSound.current);\r\n            cooldownSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (endSound.current) {\r\n            endSoundTrack.current = AudioContext.createMediaElementSource(endSound.current);\r\n            endSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n    }, [])\r\n\r\n    return (<>\r\n        {\r\n            props.children && createArray(props.children).map(child => {\r\n                return React.cloneElement(child, { playSound: playSound, ...child.props })\r\n            })\r\n        }\r\n        <audio ref={countdownSound} id=\"stopwatch-countdown\" src=\"/static/audio/stopwatch_countdown.mp3\" />\r\n        <audio ref={exerciseSound} id=\"stopwatch-exercise\" src=\"/static/audio/stopwatch_exercise.mp3\" />\r\n        <audio ref={warmupSound} id=\"stopwatch-warmup\" src=\"/static/audio/stopwatch_warmup.mp3\" />\r\n        <audio ref={breakSound} id=\"stopwatch-break\" src=\"/static/audio/stopwatch_break.mp3\" />\r\n        <audio ref={cooldownSound} id=\"stopwatch-cooldown\" src=\"/static/audio/stopwatch_cooldown.mp3\" />\r\n        <audio ref={endSound} id=\"stopwatch-cooldown\" src=\"/static/audio/stopwatch_end.mp3\" />\r\n    </>);\r\n}\r\n\r\n\r\nexport interface TrainingSoundPlayerItemProps {\r\n    playSound?: (value: string) => void;\r\n}","export function useAudioContext(): AudioContext {\r\n    const AudioContext = window.AudioContext;\r\n    return new AudioContext();\r\n}","import * as React from 'react'\r\nimport { IconBtnLabel } from './IconBtnLabel'\r\nexport interface IconButtonWithLabel {\r\n    label: string;\r\n    icon: string;\r\n    onClick?: () => void;\r\n    modifiers?: string;\r\n    labelModifier?: string;\r\n}\r\n\r\nexport function IconButtonWithLabel(props: IconButtonWithLabel) {\r\n    let classes = \"cui-button cui-icon\";\r\n    if (props.modifiers) {\r\n        classes += \" \" + props.modifiers;\r\n    }\r\n    return (<button className={classes} onClick={props.onClick} cui-icon={props.icon}><IconBtnLabel label={props.label} modifiers={props.labelModifier} /></button>);\r\n}\r\n\r\nexport interface IconBtnProps {\r\n    icon: string;\r\n    onClick?: () => void;\r\n    modifiers?: string;\r\n}\r\n\r\nexport function IconButton(props: IconBtnProps) {\r\n    let classes = \"cui-icon-button cui-icon\";\r\n    if (props.modifiers) {\r\n        classes += \" \" + props.modifiers;\r\n    }\r\n    return (<button className={classes} onClick={props.onClick} cui-icon={props.icon}></button>);\r\n}\r\n","import * as React from \"react\";\r\nimport { StopWatchPerformState, StopWatchStateOptions } from \"../../../api/stopwatch/stopwatch\";\r\nimport { IconButton } from \"../common/IconButton\";\r\n\r\ninterface CurrentStateControls {\r\n    startBtnCls: string;\r\n    startBtnText: string;\r\n    isPauseVisible: boolean;\r\n    pauseBtnText: string;\r\n    startBtnIcon: string;\r\n    pauseBtnIcon: string;\r\n}\r\n\r\n\r\nexport interface PerformerButtonBarProps {\r\n    onFullScreen: () => void;\r\n    onMute: () => void;\r\n    onPauseResume: () => void;\r\n    onStartStop: () => void;\r\n    playState: StopWatchPerformState;\r\n    soundIcon: string;\r\n    fullscreenIcon: string;\r\n}\r\n\r\nexport function PerformerButtonBar(props: PerformerButtonBarProps) {\r\n    const [controls, setControls] = React.useState<CurrentStateControls>({\r\n        startBtnText: \"Start\",\r\n        startBtnCls: \"cui-accent\",\r\n        pauseBtnText: \"Pause\",\r\n        isPauseVisible: false,\r\n        startBtnIcon: \"media_play\",\r\n        pauseBtnIcon: \"media_pause\"\r\n    })\r\n\r\n\r\n    function updatePlayStateControls(state: StopWatchPerformState) {\r\n        switch (state) {\r\n            case StopWatchStateOptions.RUNNING:\r\n                setControls({\r\n                    startBtnCls: \"cui-error\",\r\n                    startBtnIcon: \"media_stop\",\r\n                    startBtnText: \"Stop\",\r\n                    isPauseVisible: true,\r\n                    pauseBtnIcon: \"media_pause\",\r\n                    pauseBtnText: \"Pause\"\r\n                })\r\n                break;\r\n            case StopWatchStateOptions.PAUSED:\r\n                setControls({\r\n                    startBtnCls: \"cui-error\",\r\n                    startBtnIcon: \"media_stop\",\r\n                    startBtnText: \"Stop\",\r\n                    isPauseVisible: true,\r\n                    pauseBtnIcon: \"media_play\",\r\n                    pauseBtnText: \"Resume\"\r\n                })\r\n                break;\r\n            case StopWatchStateOptions.STOPPED:\r\n                setControls({\r\n                    startBtnCls: \"cui-accent\",\r\n                    startBtnIcon: \"media_play\",\r\n                    startBtnText: \"Start\",\r\n                    isPauseVisible: false,\r\n                    pauseBtnIcon: \"media_pause\",\r\n                    pauseBtnText: \"Pause\"\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        updatePlayStateControls(props.playState);\r\n        return () => { }\r\n    }, [props.playState])\r\n\r\n    return (<div className=\"training-control-btns\">\r\n        <a className=\"cui-icon-button cui-default cui-margin-small\" cui-icon={props.soundIcon} onClick={props.onMute}></a>\r\n        { controls.isPauseVisible && <IconButton icon={controls.pauseBtnIcon} onClick={props.onPauseResume} modifiers=\"cui-margin-small cui-large cui-default\" />}\r\n        <IconButton icon={controls.startBtnIcon} onClick={props.onStartStop} modifiers={\"cui-large cui-fill \" + controls.startBtnCls} />\r\n        <a className=\"cui-icon-button cui-default cui-margin-small\" cui-icon={props.fullscreenIcon} onClick={props.onFullScreen}></a>\r\n    </div >);\r\n}","import * as React from 'react'\r\nimport { calcDisplayTimer, getTextClassByActionType } from '../../../../core/helpers';\r\nimport { CountDownTimerProps } from './models';\r\n\r\n\r\n/**\r\n * CIRCLE countdowm\r\n * @param props \r\n */\r\nexport function CountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div className=\"rounded-countdown-timer\">\r\n            <p className=\"cui-margin-remove round-name\">{props.watchState.round?.name}</p>\r\n            <span className=\"cui-block cui-text-muted cui-text-small round-count\">Round {props.watchState.roundIdx + 1}/{props.watchState.roundTotal}</span>\r\n            <span className=\"cui-svg total-circle-progress\" cui-circle-progress={props.watchState.trainingProgress}>\r\n                <div className=\"\">\r\n                    <span className=\"cui-svg current-circle-progress\" cui-circle-progress={props.watchState.roundProgress}>\r\n                        <div>\r\n                            <span className=\"cui-svg countdown-circle-progress\" cui-circle-progress={props.watchState.progress}>\r\n                                <div>\r\n                                    <span className=\"cui-block cui-text-small\">{props.watchState.actionIdx + 1}</span>\r\n                                    <h1 className={\"cui-h1 cui-margin-remove \" + props.watchState.timerCls}>{props.watchState.timer}</h1>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </span>\r\n        </div>);\r\n}\r\n\r\n/**\r\n * TEST\r\n * @param props \r\n */\r\nexport function NewCountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"cui-flex-center\">\r\n                <progress className=\"cui-progress cui-small cui-success width-100\" value={props.watchState.trainingProgress} max=\"100\"></progress>\r\n            </div>\r\n            <h1 className={\"cui-h1 countdown-timer-size \" + props.watchState.timerCls}>{props.watchState.timer}</h1>\r\n            <div className=\"cui-flex-center\">\r\n                <progress className=\"cui-progress cui-small width-100\" value={props.watchState.roundProgress} max=\"100\"></progress>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * SIMPLE\r\n * @param props \r\n */\r\nexport function SimpleCountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div className=\"simple-countdown-timer\">\r\n            <p className=\"cui-margin-remove round-name\">{props.watchState.round?.name}</p>\r\n            <h3 className={\"cui-h2 cui-margin-remove action-name \" + getTextClassByActionType(props.watchState.action?.type)}>{props.watchState.action?.name}</h3>\r\n            <div>\r\n                <span className=\"cui-text-small round-count\">Round {props.watchState.roundIdx + 1}/{props.watchState.roundTotal}</span>\r\n                <span className=\"cui-margin-left cui-text-small action-index\">Action {props.watchState.actionIdx + 1}/{props.watchState.actionTotal}</span>\r\n            </div>\r\n\r\n            <h1 className={\"cui-h1 main-timer \" + props.watchState.timerCls}>{calcDisplayTimer(props.watchState.timer)}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * SIMPLE EXT\r\n * @param props \r\n */\r\nexport function SimpleExtCountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <>\r\n            <div className=\"simple-countdown-timer\">\r\n                <p className=\"cui-margin-remove round-name\">{props.watchState.round?.name}</p>\r\n                <h3 className={\"cui-h2 cui-margin-remove action-name \" + getTextClassByActionType(props.watchState.action?.type)}>{props.watchState.action?.name}</h3>\r\n                <h1 className={\"cui-h1 main-timer \" + props.watchState.timerCls}>{calcDisplayTimer(props.watchState.timer)}</h1>\r\n            </div>\r\n            <div className=\"cui-flex cui-between\">\r\n                <span className=\"cui-text-small round-count\">Round {props.watchState.roundIdx + 1}/{props.watchState.roundTotal}</span>\r\n                <span className=\"cui-margin-left cui-text-small action-index\">Action {props.watchState.actionIdx + 1}/{props.watchState.actionTotal}</span>\r\n            </div>\r\n        </>\r\n    );\r\n}","import * as React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { closeFullscreen, is, openFullscreen } from '../../../../node_modules/bpd-toolkit/dist/esm/index';\r\nimport { KeepScreenAwakeFeature } from '../../../api/screen/screen';\r\nimport { StopWatch, StopWatchPerformState, StopWatchStateOptions } from '../../../api/stopwatch/stopwatch';\r\nimport { calculateDuration, calculateProgress, getBgClassByType, getTotalDuration, showMessage, setPageTitle, setNavbarTitle } from '../../../core/helpers';\r\nimport { Round, StopwatchAction, Training } from '../../../core/models';\r\nimport { CompleteTrainingValidator } from '../../../core/validators';\r\nimport { NotFound } from '../common/NotFound';\r\nimport { useSettings } from '../../../ui/hooks/settings';\r\nimport { useIsFullscreen } from '../../../ui/hooks/useResize';\r\nimport { useIsLoading } from '../../../ui/hooks/loading';\r\nimport { TrainingSoundPlayer, TrainingSoundPlayerItemProps } from './TrainingSoundPlayer';\r\nimport { useStopwatch2 } from './hook';\r\nimport { PerformerButtonBar } from './PerformButtonBar';\r\nimport { getCountDownTimer } from './countdown/functions';\r\nimport { Loading } from '../common/Loading';\r\nimport { PerfromTrainingState, StopwatchState, TimeStateData } from './interfaces';\r\n\r\n\r\nexport default function PerfromTraining() {\r\n    const [state, setState] = React.useState<PerfromTrainingState>({\r\n        training: undefined\r\n    })\r\n\r\n    const [isLoading, setIsLoading] = useIsLoading(false);\r\n    const [notFound, setNotFound] = React.useState(false);\r\n\r\n    const { id } = useParams();\r\n\r\n    function onGetTraining(training: Training) {\r\n        if (!training) {\r\n            setNotFound(true);\r\n        }\r\n        let validation = new CompleteTrainingValidator().validate(training);\r\n        if (!validation.status) {\r\n            showMessage(\"Incorrect training\", `Training is not correct: ${validation.errors.join(\", \")}`)\r\n            return;\r\n        }\r\n        setIsLoading(false);\r\n        setState({\r\n            training: training\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(\"Perform training\");\r\n\r\n        const getTrainingSubscription = window.$flow.subscribe(\"GET_TRAINING\", { finish: onGetTraining })\r\n\r\n        if (id > -1) {\r\n            setIsLoading(true);\r\n            window.$flow.perform(\"GET_TRAINING\", id)\r\n        }\r\n        return () => {\r\n            window.$flow.unsubscribe(\"GET_TRAINING\", getTrainingSubscription.id)\r\n        }\r\n    }, [id])\r\n\r\n    if (isLoading) {\r\n        return <Loading />;\r\n    } else if (notFound) {\r\n        return <NotFound message=\"We couldn't find training\" classes=\"cui-height-1-1 cui-flex-center\" />;\r\n    } else if (!state.training) {\r\n        return <span></span>;\r\n    }\r\n    return (<PerformTrainingElement training={state.training} />);\r\n}\r\n\r\n\r\ninterface PerformTrainingElementProps {\r\n    training: Training;\r\n}\r\n\r\nfunction PerformTrainingElement(props: PerformTrainingElementProps) {\r\n\r\n    const [errorMessage, setErrorMessage] = React.useState(\"\");\r\n\r\n    function callError(message: string) {\r\n        setErrorMessage(message);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(\"Perform training\");\r\n        const wakeLock = new KeepScreenAwakeFeature();\r\n        if (props.training) {\r\n            setPageTitle(props.training.name);\r\n            setNavbarTitle(props.training.name);\r\n            try {\r\n                wakeLock.activate();\r\n            } catch (e) {\r\n                setErrorMessage(\"We could not activate feature to keep your device's screen awake during training performance\")\r\n            }\r\n\r\n        }\r\n\r\n        return () => {\r\n            wakeLock.release();\r\n        }\r\n    }, [props.training])\r\n    return (<>\r\n        <TrainingSoundPlayer>\r\n            <TrainingPerformer key={props.training?.id} callError={callError} training={props.training} />\r\n        </TrainingSoundPlayer>\r\n        {\r\n            is(errorMessage) &&\r\n            <div className=\"cui-position-float cui-position-bottom cui-position-right app-float-bottom cui-margin-right\"><span className=\"cui-icon cui-error cui-tooltip\" cui-icon=\"ban\" cui-tooltip={errorMessage}></span></div>\r\n        }\r\n    </>\r\n    );\r\n}\r\n\r\ninterface TrainingPerformerProps {\r\n    callError: (error: string) => void;\r\n    training: Training;\r\n}\r\n\r\nfunction TrainingPerformer(props: TrainingPerformerProps & TrainingSoundPlayerItemProps) {\r\n\r\n    const [stopwatch, setOnTick] = useStopwatch2();\r\n\r\n    const [watchState, setWatchState] = React.useState<StopwatchState>({\r\n        timer: 0,\r\n        state: StopWatchStateOptions.STOPPED,\r\n        timerCls: \"\",\r\n        progress: 100,\r\n        roundProgress: 100,\r\n        trainingProgress: 100,\r\n        roundIdx: 0,\r\n        roundTotal: 0,\r\n        actionIdx: 0,\r\n        actionTotal: 0,\r\n        roundDuration: 0,\r\n        totalDuration: 0,\r\n        action: undefined,\r\n        round: undefined,\r\n    })\r\n\r\n    const [settings, setSettings] = useSettings();\r\n\r\n\r\n    const stopWatchRef = React.useRef(stopwatch);\r\n    stopWatchRef.current = stopwatch;\r\n    const watchStateRef = React.useRef(watchState);\r\n    watchStateRef.current = watchState;\r\n    const settingsRef = React.useRef(settings);\r\n    settingsRef.current = settings;\r\n\r\n    const mainViewRef = React.useRef(null);\r\n\r\n    const isFullscreen = useIsFullscreen(mainViewRef.current);\r\n\r\n    function setDefaultWatchState(training: Training) {\r\n        let round = training.rounds[0];\r\n        let action = round.actions[0];\r\n        setWatchState({\r\n            ...watchState,\r\n            round: round,\r\n            roundIdx: 0,\r\n            roundTotal: training.rounds.length,\r\n            roundDuration: calculateDuration(round.actions),\r\n            actionIdx: 0,\r\n            action: action,\r\n            actionTotal: round.actions.length,\r\n            totalDuration: getTotalDuration(training)[1]\r\n        })\r\n    }\r\n\r\n    function setNextAction(): boolean {\r\n        let nextActionIdx = watchStateRef.current.actionIdx + 1;\r\n        if (watchStateRef.current.round.actions.length > nextActionIdx) {\r\n            let newAction = watchStateRef.current.round.actions[nextActionIdx]\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                actionIdx: nextActionIdx,\r\n                action: newAction,\r\n            })\r\n            return true;\r\n        }\r\n        let nextRoundIdx = watchStateRef.current.roundIdx + 1;\r\n        if (props.training.rounds.length > nextRoundIdx) {\r\n            let newRound = props.training.rounds[nextRoundIdx];\r\n            let newAction = newRound.actions[0];\r\n\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                actionIdx: 0,\r\n                action: newAction,\r\n                actionTotal: newRound.actions.length,\r\n                round: newRound,\r\n                roundIdx: nextRoundIdx,\r\n                roundDuration: calculateDuration(newRound.actions),\r\n            })\r\n            return true;\r\n        }\r\n        setDefaultWatchState(props.training);\r\n        return false;\r\n    }\r\n\r\n    function onStopwatchTick(currentTime: number, total: number, stopwatch: StopWatch): boolean {\r\n        let actionDuration = parseInt(watchStateRef.current.action.duration)//parseInt(currentRef.current.action.duration)\r\n        let ct = actionDuration - currentTime;\r\n        let progress = calculateProgress(currentTime, actionDuration)\r\n        if (currentTime === 0) {\r\n            playSound(watchStateRef.current.action.type);\r\n        }\r\n        if (ct > 0) {\r\n            // Normal tick\r\n            updateStopWatchState(stopwatch.getState(), {\r\n                time: ct,\r\n                progress: 100 - progress,\r\n                ct: currentTime,\r\n                total: total\r\n            })\r\n            // Start round end countdown\r\n            if (ct <= 2) {\r\n                playSound(\"countdown\");\r\n            }\r\n            return true;\r\n        } else {\r\n            // Next action\r\n            if (!setNextAction()) {\r\n                // End of training\r\n                playSound(\"end\");\r\n                updateStopWatchState(StopWatchStateOptions.STOPPED, {\r\n                    time: 0, progress: 100, ct: 0, total: 0\r\n                })\r\n                return false;\r\n            }\r\n            playSound(\"countdown\");\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING, { time: 0, progress: 0, ct: ct, total: total })\r\n            stopWatchRef.current.reset();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function playSound(name: string) {\r\n        if (!settingsRef.current.soundEnabled || !props.playSound || !is(name)) {\r\n            return\r\n        }\r\n\r\n        props.playSound(name);\r\n    }\r\n\r\n    function onStartClick() {\r\n        if (watchState.state === StopWatchStateOptions.STOPPED && stopwatch.start()) {\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING);\r\n        } else if (watchState.state !== StopWatchStateOptions.STOPPED && stopwatch.stop()) {\r\n            setDefaultWatchState(props.training);\r\n            updateStopWatchState(StopWatchStateOptions.STOPPED, { time: 0, progress: 100, ct: 0, total: 0 });\r\n\r\n        }\r\n    }\r\n\r\n    function onPauseClick() {\r\n        if (watchState.state === StopWatchStateOptions.RUNNING && stopwatch.pause()) {\r\n            updateStopWatchState(StopWatchStateOptions.PAUSED);\r\n        } else if (watchState.state === StopWatchStateOptions.PAUSED && stopwatch && stopwatch.resume()) {\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING);\r\n        }\r\n    }\r\n\r\n    function updateStopWatchState(watchstate: StopWatchPerformState, timeData?: TimeStateData) {\r\n        if (!is(timeData) || timeData.time < 0) {\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                state: watchstate,\r\n            })\r\n        } else {\r\n            let roundProgress = calculateRoundProgress(timeData.ct);\r\n            let trainginProgress = calculateTrainingProgress(timeData.total);\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                timer: timeData.time,\r\n                timerCls: getTimerCls(timeData.time, watchstate),\r\n                state: watchstate,\r\n                progress: timeData.progress,\r\n                roundProgress: roundProgress,\r\n                trainingProgress: trainginProgress\r\n            })\r\n        }\r\n    }\r\n\r\n    function calculateRoundCurrentTime(ct: number) {\r\n        return watchStateRef.current.round.actions.reduce<number>((result: number, act: StopwatchAction, idx: number) => {\r\n            if (idx < watchStateRef.current.actionIdx) {\r\n                return result + parseInt(act.duration);\r\n            }\r\n            return result;\r\n        }, 0) + ct;\r\n    }\r\n\r\n    function calculateRoundProgress(ct: number) {\r\n        return 100 - calculateProgress(calculateRoundCurrentTime(ct), watchStateRef.current.roundDuration);\r\n    }\r\n\r\n    function calculateTrainingProgress(ct: number) {\r\n        return 100 - calculateProgress(ct, watchStateRef.current.totalDuration);\r\n    }\r\n\r\n    function getTimerCls(timer: number, state: StopWatchPerformState): string {\r\n        return state === StopWatchStateOptions.RUNNING && timer >= 0 && timer < 3 ? \"cui-text-warning timer-blink-animation\" : \"\";\r\n    }\r\n\r\n    function getBackgroundClass(action: StopwatchAction) {\r\n        return !is(action) ? \"\" : getBgClassByType(action.type);\r\n    }\r\n\r\n    function onFullScreen() {\r\n        if (!mainViewRef.current) {\r\n            return;\r\n        }\r\n        if (isFullscreen) {\r\n            closeFullscreen();\r\n        }\r\n        openFullscreen(mainViewRef.current);\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        \r\n        if (props.training) {\r\n            setDefaultWatchState(props.training);\r\n            setOnTick(onStopwatchTick);\r\n        }\r\n\r\n        return () => {\r\n            if (stopWatchRef.current) {\r\n                stopWatchRef.current.stop();\r\n            }\r\n        }\r\n    }, [props.training])\r\n\r\n    return (<div className=\"stopwatch-layout-content cui-background-default\" ref={mainViewRef}>\r\n        <div className={\"cui-height-1-1 cui-overflow-y-auto cui-flex cui-center cui-middle \" + getBackgroundClass(watchState.action)} >\r\n            <div className=\"stopwatch-content-width cui-text-center cui-flex-center animation-fade-in\">\r\n                <div>\r\n                    {getCountDownTimer(settings.countdownView, watchState)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <PerformerButtonBar playState={watchState.state}\r\n            soundIcon={settings.soundEnabled ? \"speaker\" : \"volume_muted\"}\r\n            fullscreenIcon={isFullscreen ? \"shrink\" : \"expand\"}\r\n            onFullScreen={onFullScreen}\r\n            onStartStop={onStartClick}\r\n            onPauseResume={onPauseClick}\r\n            onMute={() => {\r\n                setSettings({\r\n                    ...settings,\r\n                    soundEnabled: !settings.soundEnabled\r\n                })\r\n            }}\r\n        />\r\n    </div>);\r\n}\r\n\r\n","import * as React from 'react'\r\n\r\nexport function useIsLoading(init: boolean): [boolean, (val: boolean) => void] {\r\n    const loading = React.useRef(init);\r\n\r\n    function setIsLoading(flag: boolean) {\r\n        console.log(\"Flag: \" + flag + \", Loading: \" + loading)\r\n        if (loading.current != flag) {\r\n            loading.current = flag;\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        loading.current = init;\r\n    }, [])\r\n    return [loading.current, setIsLoading];\r\n}\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n// import { Training } from \"../../../core/models\";\r\nimport { StopWatch, StopwatchCallback, StopWatchStateOptions } from \"../../../api/stopwatch/stopwatch\";\r\n// import { StopwatchState } from \"./PerformTraining\";\r\n\r\n// export function useStopwatch(callback: StopwatchCallback): StopWatch {\r\n//     const [stopwatch, setStopwatch] = useState(new StopWatch());\r\n\r\n//     React.useEffect(() => {\r\n//         console.log(\"Stopwatch hook init\")\r\n\r\n//         let stop = new StopWatch();\r\n//         stop.onTick(callback);\r\n//         return () => {\r\n//             console.log(\"Stopwatch hook end\")\r\n//         }\r\n//     }, [])\r\n//     return stopwatch;\r\n// }\r\n\r\nexport function useStopwatch2(): [StopWatch, (callback: StopwatchCallback) => void] {\r\n    const [stopwatch, setStopwatch] = React.useState(new StopWatch());\r\n\r\n    React.useEffect(() => {\r\n        console.log(\"Stopwatch hook init\")\r\n        return () => {\r\n            console.log(\"Stopwatch hook end\")\r\n        }\r\n    }, [])\r\n    return [stopwatch, (callback: StopwatchCallback) => {\r\n        stopwatch.onTick(callback);\r\n        setStopwatch(stopwatch);\r\n    }];\r\n}\r\n\r\n// export interface PerformTrainingHookObject {\r\n//     current: StopwatchState,\r\n//     pause: () => void;\r\n//     resume: () => void;\r\n//     start: () => void;\r\n//     stop: () => void;\r\n// }\r\n\r\n\r\n// export function usePerformTraining(training: Training): PerformTrainingHookObject {\r\n//     const [stopWatch, setOnTick] = useStopwatch2();\r\n//     const [watchState, setWatchState] = React.useState<StopwatchState>({\r\n//         timer: \"-\",\r\n//         state: StopWatchStateOptions.STOPPED,\r\n//         timerCls: \"\",\r\n//         progress: 100,\r\n//         roundProgress: 100,\r\n//         trainingProgress: 100,\r\n//         roundIdx: 0,\r\n//         roundTotal: 0,\r\n//         actionIdx: 0,\r\n//         actionTotal: 0,\r\n//         roundDuration: 0,\r\n//         totalDuration: 0,\r\n//         action: undefined,\r\n//         round: undefined,\r\n//     })\r\n\r\n\r\n//     React.useEffect(() => {\r\n\r\n//     }, [watchState])\r\n\r\n//     return {\r\n\r\n//     }\r\n// }","import * as React from \"react\";\r\nimport { StopwatchState } from \"../interfaces\";\r\nimport { SimpleCountDownTimer, CountDownTimer, NewCountDownTimer, SimpleExtCountDownTimer } from \"./CountdownTimers\";\r\n\r\nexport function getCountDownTimer(type: string, watchState: StopwatchState): JSX.Element {\r\n    switch (type) {\r\n        case \"simple\":\r\n            return <SimpleCountDownTimer watchState={watchState} />\r\n        case \"circle\":\r\n            return <CountDownTimer watchState={watchState} />;\r\n        case \"test\":\r\n            return <NewCountDownTimer watchState={watchState} />;\r\n        case \"extended\":\r\n            return <SimpleExtCountDownTimer watchState={watchState} />;\r\n        default:\r\n            return <div></div>\r\n    }\r\n}","import * as React from 'react'\r\nimport { DefaultSettings } from '../../core/statics';\r\nimport { Settings } from '../../core/models';\r\nimport { SETTINGS_FLOW_ACTIONS } from '../../app/flow/settings';\r\nimport { setDarkMode } from '../../core/helpers';\r\n\r\nexport function useSettings(): [Settings, (settings: Settings) => void] {\r\n    const [settings, setSettings] = React.useState({\r\n        ...DefaultSettings\r\n    })\r\n\r\n    function onSaveSettings() {\r\n        // Obtain settings from store\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.GET_SETTINGS);\r\n    }\r\n\r\n    function onGetSettings(settings: Settings) {\r\n        setSettings(settings);\r\n        setDarkMode(settings.darkMode);\r\n    }\r\n\r\n    function updateSettings(settings: Settings) {\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settings);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const settingsSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, { finish: onGetSettings })\r\n        const settingsUpdateSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, { finish: onSaveSettings })\r\n        onSaveSettings();\r\n        return () => {\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, settingsSub.id);\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settingsUpdateSub.id);\r\n        }\r\n    }, [settings.darkMode, settings.soundEnabled])\r\n\r\n    return [settings, updateSettings];\r\n}\r\n"],"sourceRoot":""}