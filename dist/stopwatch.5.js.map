{"version":3,"sources":["webpack:///./src/ui/components/common/PageHeader.tsx","webpack:///./src/ui/components/common/MainComponentBase.tsx","webpack:///./src/ui/hooks/settings.tsx","webpack:///./src/ui/components/settings/SettingsSwitchListItem.tsx","webpack:///./src/ui/components/common/BpdDrop.tsx","webpack:///./src/ui/components/perform/countdown/models.ts","webpack:///./src/ui/components/settings/StopwatchSettings.tsx"],"names":["PageHeader","props","className","icon","cui-icon","title","description","MainComponentBase","routeData","MAPPIGNS","getRoute","routeName","React","name","setTitle","updateTitle","is","setPageTitle","setNavbarTitle","createArray","children","map","child","type","useSettings","DefaultSettings","settings","setSettings","onSaveSettings","window","$settingsFlow","perform","SETTINGS_FLOW_ACTIONS","GET_SETTINGS","onGetSettings","setDarkMode","darkMode","settingsSub","subscribe","finish","settingsUpdateSub","SET_SETTINGS","unsubscribe","id","soundEnabled","SettingsSwitchListItem","value","label","checked","onChange","ev","target","onUpdate","htmlFor","BpdDrop","dropRef","undefined","modifiers","Error","current","$cui","get","cui-drop","items","item","index","key","onClick","emit","COUNTDOWN_TYPES","StopwatchSettings","appSettings","useAppSettings","onValueChange","newSettings","countdownView","mode","AppRunningModes","DEVELOPMENT","to","getUrl"],"mappings":"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","file":"stopwatch.5.js","sourcesContent":["import * as React from 'react'\r\nimport { RouteDetails } from '../../../api/routes/routes';\r\nimport { TriangleShadow } from './TriangleShadow';\r\n\r\nexport interface PageHeaderProps {\r\n    title: string;\r\n    description: string;\r\n    icon?: string;\r\n}\r\n\r\nexport interface PageHeaderWrapperProps {\r\n    route: RouteDetails;\r\n}\r\n\r\n\r\nexport function PageHeader(props: PageHeaderProps) {\r\n    return (<div className=\"stopwatch-page-header cui-margin-bottom\">\r\n        <div className=\"cui-container cui-center cui-background-default\">\r\n            <div className=\"cui-padding-large-vertical\">\r\n                {props.icon && <div className=\"cui-flex-center cui-margin-bottom\"><span cui-icon={props.icon}></span></div>}\r\n                <h1 className=\"cui-h1 cui-text-center cui-margin-remove-bottom cui-anim-fade-in\">{props.title}</h1>\r\n                <p className=\"cui-text-center cui-text-muted cui-scale-y-in cui-animation-delay cui-margin-large-bottom\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n        <TriangleShadow />\r\n    </div>);\r\n}\r\n\r\n\r\nexport function PageHeaderRouteWrapper(props: PageHeaderWrapperProps) {\r\n    return (<PageHeader title={props.route.name} description={props.route.description} icon={props.route.icon} />);\r\n}","import { is } from 'bpd-toolkit/dist/esm/index';\r\nimport * as React from 'react'\r\nimport { setPageTitle, setNavbarTitle, createArray } from '../../../core/helpers';\r\nimport { MAPPIGNS } from '../../../ui/routes';\r\nimport { PageHeader } from './PageHeader';\r\n\r\nexport interface MainComponentBaseProps {\r\n    routeName: string;\r\n    children: JSX.Element | JSX.Element[] | undefined;\r\n}\r\n\r\nexport interface BaseComponentProps {\r\n    setPageTitle: (value: string) => void;\r\n}\r\n\r\nexport function MainComponentBase(props: MainComponentBaseProps) {\r\n    const routeData = MAPPIGNS.getRoute(props.routeName);\r\n    const [title, setTitle] = React.useState(routeData.name);\r\n\r\n    function updateTitle(title: string) {\r\n        if (!is(title)) {\r\n            return;\r\n        }\r\n        setPageTitle(routeData.name);\r\n        setNavbarTitle(routeData.name);\r\n        setTitle(title)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(routeData.name);\r\n        setNavbarTitle(routeData.name);\r\n    }, [])\r\n    return (\r\n        <>\r\n            <PageHeader title={title} icon={routeData.icon} description={routeData.description} />\r\n            <div className=\"stopwatch-content-width cui-margin-top\">\r\n                {\r\n                    createArray(props.children).map(child => {\r\n                        if (typeof child.type === 'string') {\r\n                            return React.cloneElement(child, { ...child.props })\r\n                        }\r\n                        return React.cloneElement(child, { setPageTitle: updateTitle, ...child.props })\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react'\r\nimport { DefaultSettings } from '../../core/statics';\r\nimport { Settings } from '../../core/models';\r\nimport { SETTINGS_FLOW_ACTIONS } from '../../app/flow/settings';\r\nimport { setDarkMode } from '../../core/helpers';\r\n\r\nexport function useSettings(): [Settings, (settings: Settings) => void] {\r\n    const [settings, setSettings] = React.useState({\r\n        ...DefaultSettings\r\n    })\r\n\r\n    function onSaveSettings() {\r\n        // Obtain settings from store\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.GET_SETTINGS);\r\n    }\r\n\r\n    function onGetSettings(settings: Settings) {\r\n        setSettings(settings);\r\n        setDarkMode(settings.darkMode);\r\n    }\r\n\r\n    function updateSettings(settings: Settings) {\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settings);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const settingsSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, { finish: onGetSettings })\r\n        const settingsUpdateSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, { finish: onSaveSettings })\r\n        onSaveSettings();\r\n        return () => {\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, settingsSub.id);\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settingsUpdateSub.id);\r\n        }\r\n    }, [settings.darkMode, settings.soundEnabled])\r\n\r\n    return [settings, updateSettings];\r\n}\r\n","import * as React from 'react'\r\nexport interface OnSwitchValueUpdate {\r\n    (name: string, value: boolean): void;\r\n}\r\n\r\n\r\nexport interface SettingsSwitchListItemProps {\r\n    label: string,\r\n    value: boolean,\r\n    name: string,\r\n    onUpdate: OnSwitchValueUpdate;\r\n}\r\n\r\nexport function SettingsSwitchListItem(props: SettingsSwitchListItemProps) {\r\n    function onChange(ev: any) {\r\n        let target = ev.target\r\n        if (props.onUpdate) {\r\n            props.onUpdate(target.name, target.checked);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n\r\n    }, [props.value, props.name])\r\n    return (\r\n        <div className=\"cui-flex cui-middle cui-padding-small\">\r\n            <div className=\"cui-flex-grow\">{props.label}</div>\r\n            <div className=\"cui-input-switch\">\r\n                <input type=\"checkbox\" id={props.name} name={props.name} checked={props.value} onChange={onChange} />\r\n                <label htmlFor={props.name} className=\"cui-content\"></label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { is } from 'bpd-toolkit/dist/esm/index';\r\nimport * as React from 'react'\r\nimport { ElementManager } from 'cui-light/dist/esm/managers/element';\r\n\r\nexport interface BpdDropProps {\r\n    id: string;\r\n    value: string;\r\n    name?: string;\r\n    items: string[];\r\n    onChange?: (name: string, value: string) => void;\r\n    modifiers?: string;\r\n}\r\n\r\nexport function BpdDrop(props: BpdDropProps) {\r\n    const dropRef = React.useRef<ElementManager>(undefined);\r\n    function onChange(value: string) {\r\n        if (dropRef.current) {\r\n            dropRef.current.emit(\"close\");\r\n        }\r\n        if (props.onChange && value !== props.value) {\r\n            props.onChange(props.name, value);\r\n        }\r\n    }\r\n\r\n    let modifiers = !props.modifiers ? \"\" : \" \" + props.modifiers;\r\n\r\n    React.useEffect(() => {\r\n        if (!is(props.id)) {\r\n            throw new Error(\"Drop component id was not provieded, but is required!\");\r\n        }\r\n        dropRef.current = window.$cui.get(\"#\" + props.id);\r\n    })\r\n\r\n    return (<div className={\"cui-drop-trigger cui-block\" + modifiers}>\r\n        <a className=\"cui-link cui-flex cui-middle cui-width-1-1 cui-padding-small\">\r\n            <span className=\"cui-flex-grow cui-text-capital cui-margin-right\">{props.value}</span>\r\n            <span cui-icon=\"chevron_small_down\"></span>\r\n        </a>\r\n        <div className=\"cui-dropdown drop-height\" cui-drop=\"outClose: Y;autoClose: Y\" id={props.id}>\r\n            <ul className=\"cui-drop-nav drop-max-width\">\r\n                {props.items && props.items.map((item, index) => {\r\n                    return <li key={item + index}><a className=\"cui-overflow-hidden cui-text-truncate cui-text-capital\" onClick={() => { onChange(item) }}>{item}</a></li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    </div >);\r\n}\r\n","import { StopwatchState } from \"../PerformTraining\";\r\n\r\nexport const COUNTDOWN_TYPES = ['simple', 'circle', \"test\"];\r\n\r\nexport interface CountDownTimerProps {\r\n    watchState: StopwatchState;\r\n}","import * as React from 'react'\r\nimport { SettingsSwitchListItem } from './SettingsSwitchListItem'\r\nimport { useSettings } from '../../../ui/hooks/settings';\r\nimport { BpdDrop } from '../common/BpdDrop';\r\nimport { COUNTDOWN_TYPES } from '../perform/countdown/models';\r\nimport { MAPPIGNS } from '../../../ui/routes';\r\nimport { useAppSettings } from '../../../ui/hooks/AppSettings';\r\nimport { AppRunningModes } from '../../../core/models';\r\nimport { MainComponentBase } from '../common/MainComponentBase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function StopwatchSettings() {\r\n    const [settings, setSettings] = useSettings();\r\n    const appSettings = useAppSettings();\r\n\r\n    function onValueChange(name: string, value: boolean) {\r\n        if (name !== 'soundEnabled' && name !== \"darkMode\" && name !== \"simpleView\") {\r\n            return;\r\n        }\r\n        let newSettings = {\r\n            ...settings,\r\n            [name]: value\r\n        }\r\n        setSettings(newSettings)\r\n    }\r\n\r\n    function onDropChange(name: string, value: string) {\r\n        let newSettings = {\r\n            ...settings,\r\n            [name]: value\r\n        }\r\n        setSettings(newSettings)\r\n    }\r\n    React.useEffect(() => {\r\n\r\n    }, [settings.darkMode, settings.soundEnabled])\r\n    return (<>\r\n        <MainComponentBase routeName=\"settings\">\r\n            <div key=\"settings-switches\" className=\"cui-section stopwatch-content-width\">\r\n                <ul className=\"cui-list\">\r\n                    <li>\r\n                        <SettingsSwitchListItem label=\"Dark mode\" name=\"darkMode\" value={settings.darkMode} onUpdate={onValueChange} />\r\n                    </li>\r\n                    <li>\r\n                        <SettingsSwitchListItem label=\"Play sound\" name=\"soundEnabled\" value={settings.soundEnabled} onUpdate={onValueChange} />\r\n                    </li>\r\n                    <li>\r\n                        <div className=\"cui-flex cui-middle cui-between cui-padding-small\">\r\n                            <span>Countdown timer</span>\r\n                            <BpdDrop id=\"settings-drop\" name=\"countdownView\" value={settings.countdownView} items={COUNTDOWN_TYPES} onChange={onDropChange} />\r\n                        </div>\r\n                    </li>\r\n\r\n                </ul>\r\n            </div>\r\n            <div key=\"settings-devtool\" className=\"cui-flex cui-center cui-right--s\">\r\n                {appSettings.mode === AppRunningModes.DEVELOPMENT && <Link to={MAPPIGNS.getUrl('devtools')} className=\"cui-link\" >Visit DevTools</Link>}\r\n            </div>\r\n        </MainComponentBase></>);\r\n}"],"sourceRoot":""}