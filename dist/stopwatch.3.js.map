{"version":3,"sources":["webpack:///./src/ui/components/common/PageHeader.tsx","webpack:///./src/ui/components/common/BpdActionIcon.tsx","webpack:///./src/ui/components/trainings/IconLabel.tsx","webpack:///./src/ui/components/common/ErrorsList.tsx","webpack:///./src/ui/components/common/BpdConfirmDrop.tsx","webpack:///./src/ui/components/common/GoBack.tsx","webpack:///./src/ui/components/common/NotFound.tsx","webpack:///./src/ui/components/trainings/ButtonBar.tsx","webpack:///./src/ui/components/common/BpdActionLabel.tsx","webpack:///./src/ui/components/actions/ActionSelectDropdown.tsx","webpack:///./src/ui/components/trainings/EditRoundDialog.tsx","webpack:///./src/ui/components/trainings/EditRoundListItem.tsx","webpack:///./src/ui/components/common/BpdDialogFooter.tsx","webpack:///./src/ui/components/trainings/QuickRoundDialog.tsx","webpack:///./src/ui/components/trainings/EditTraining.tsx","webpack:///./src/ui/components/common/Dialogs.ts"],"names":["PageHeader","props","className","icon","cui-icon","title","description","BpdActionIcon","type","IconLabel","label","ErrorsList","errors","length","map","error","index","key","BpdConfirmDrop","cancelLabel","confirmLabel","cui-drop","id","message","onClick","window","$cui","get","emit","onCancel","onConfirm","withRouter","history","goBack","NotFound","classes","to","ButtonBar","React","items","item","ButtonBarItem","modifiers","BpdActionLabel","action","name","duration","ActionSelectDropdown","DropTrigger","value","actions","onSelect","onChange","EditRoundDialog","useState","selected","state","setState","setStateRoundData","definedActions","round","getDefaultRoundName","currentCount","is","BpdDialog","body","htmlFor","placeholder","ev","target","push","are","copy","onSwapAction","newActions","splice","onDeleteAction","footer","cui-close","onSave","validation","RoundValidator","validate","status","EditRoundListItem","getUserDisplayNotation","calculateDuration","isFirst","onMoveUp","cui-tooltip","isLast","onMoveDown","onClone","onEdit","onDelete","BpdDialogFooter","QuickRoundDialog","groupedActions","groupActionsByType","warmup","exercise","break","cooldown","setActions","exerciseCount","setExerciseCount","QuickRoundDialogBody","onUpdate","data","count","onCounterUpdate","buildQuickRoundActions","updateCounter","QuickRoundDialogSelect","StopwatchActionType","WARMUP","EXERCISE","BREAK","COOLDOWN","EditTrainingSection","currentIndex","currentRound","setDefinedActions","onRoundEdit","training","rounds","onRoundDelete","updateRoundsState","onRoundDown","move","onRoundUp","onRoundClone","idx","cloned","clone","insert","updateOrInsertRound","onFormChange","includes","getDefinedActions","DefaultActions","getDefinedActionsSub","$actionsFlow","subscribe","ACTIONS_FLOW_ACTIONS","GET_ALL","finish","perform","unsubscribe","rows","arr","buttonNavItems","isLoading","setIsLoading","TrainingState","NEW","notFound","setNotFound","useParams","onUpdateTraining","result","showToast","showMessage","onGetTraining","setPageTitle","onGetDraft","onTrainingSave","validaton","TrainingValidator","$flow","ACTIONS","UPDATE_TRAINING","join","onDeleteTraining","PUBLISH","onYes","alert","CLEAR_DRAFT","onDeleteTrainingSub","setNavbarTitle","updateTrainingSub","getTrainingSub","GET_FOR_EDIT","getDraftSub","deleteTraininSub","GET_DRAFT","Loading","DRAFT","SET_DRAFT","pushDraft","MAPPIGNS","renderUrl"],"mappings":"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","file":"stopwatch.3.js","sourcesContent":["import * as React from 'react'\r\nimport { RouteDetails } from '../../../api/routes/routes';\r\nimport { TriangleShadow } from './TriangleShadow';\r\n\r\nexport interface PageHeaderProps {\r\n    title: string;\r\n    description: string;\r\n    icon?: string;\r\n}\r\n\r\nexport interface PageHeaderWrapperProps {\r\n    route: RouteDetails;\r\n}\r\n\r\n\r\nexport function PageHeader(props: PageHeaderProps) {\r\n    return (<div className=\"stopwatch-page-header cui-margin-bottom\">\r\n        <div className=\"cui-container cui-center cui-background-default\">\r\n            <div className=\"cui-padding-large-vertical\">\r\n                {props.icon && <div className=\"cui-flex-center cui-margin-bottom\"><span cui-icon={props.icon}></span></div>}\r\n                <h1 className=\"cui-h1 cui-text-center cui-margin-remove-bottom cui-anim-fade-in\">{props.title}</h1>\r\n                <p className=\"cui-text-center cui-text-muted cui-scale-y-in cui-animation-delay cui-margin-large-bottom\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n        <TriangleShadow />\r\n    </div>);\r\n}\r\n\r\n\r\nexport function PageHeaderRouteWrapper(props: PageHeaderWrapperProps) {\r\n    return (<PageHeader title={props.route.name} description={props.route.description} icon={props.route.icon} />);\r\n}","import * as React from 'react'\r\n\r\nexport interface BpdActionIconProps {\r\n    type: string;\r\n    className?: string;\r\n}\r\n\r\nexport function BpdActionIcon(props: BpdActionIconProps) {\r\n    return (\r\n        <span className={\"cui-icon \" + (props.className ?? \"\")} cui-icon={`stopwatch_${props.type}`}></span>\r\n    );\r\n}\r\n","import * as React from 'react'\r\nexport interface IconLabelProps {\r\n    label: string;\r\n}\r\nexport function IconLabel(props: IconLabelProps) {\r\n    return (<span className=\"cui-margin-small-left cui-unhidden--m\">{props.label}</span>);\r\n}\r\n","import * as React from 'react'\r\n\r\nexport interface ErrorsListProps {\r\n    errors: string[];\r\n}\r\n\r\n\r\nexport function ErrorsList(props: ErrorsListProps) {\r\n    return (\r\n        <>\r\n            {props.errors &&\r\n                props.errors.length > 0 &&\r\n                <ul className=\"cui-list\">\r\n                    {\r\n                        props.errors.map((error: string, index: number) => {\r\n                            return <li key={index} className=\"cui-animation-fade-in\"><span className=\"cui-text-error\">{error}</span></li>\r\n                        })\r\n                    }\r\n                </ul>}\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react'\r\n\r\nexport interface BpdConfirmDropProp {\r\n    message: string;\r\n    id: string;\r\n    cancelLabel?: string;\r\n    confirmLabel?: string;\r\n    onCancel?: () => void;\r\n    onConfirm: () => void;\r\n}\r\n\r\nexport function BpdConfirmDrop(props: BpdConfirmDropProp) {\r\n    const cancelLabel: string = props.cancelLabel ?? \"Cancel\";\r\n    const confirmLabel: string = props.confirmLabel ?? \"OK\";\r\n    function onCancel() {\r\n        window.$cui.get(\"#\" + props.id).emit(\"close\");\r\n        if (props.onCancel)\r\n            props.onCancel()\r\n    }\r\n\r\n    function onConfirm() {\r\n        window.$cui.get(\"#\" + props.id).emit(\"close\");\r\n        props.onConfirm()\r\n    }\r\n\r\n    return (<div className=\"cui-dropdown cui-section drop-max-width\" cui-drop=\"outClose: Y; autoClose: Y\" id={props.id}>\r\n        <p>{props.message}</p>\r\n        <div className=\"cui-flex cui-right cui-margin-top\">\r\n            <button className=\"cui-button cui-small\" onClick={() => { onCancel() }}>{cancelLabel}</button>\r\n            <button className=\"cui-button cui-accent cui-small cui-margin-small-left\" onClick={() => { onConfirm() }}>{confirmLabel}</button>\r\n        </div>\r\n    </div>);\r\n}\r\n","import * as React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction GoBack(props: any) {\r\n    const { history } = props;\r\n    return (<button className=\"cui-button cui-accent\" onClick={() => history.goBack()}>Go Back</button>)\r\n}\r\n\r\n\r\nexport default withRouter(GoBack);","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GoBack from \"./GoBack\";\r\n\r\nexport interface NotFoundProps {\r\n    message: string;\r\n    classes?: string;\r\n    goBack?: boolean;\r\n}\r\n\r\nexport function NotFound(props: NotFoundProps) {\r\n    return (<div className={props.classes}>\r\n        <div>\r\n            <h2 className=\"cui-h2 cui-text-center cui-text-error\">{props.message}</h2>\r\n            <div className=\"\">\r\n                <div className=\"cui-flex cui-center\">\r\n                    <Link to=\"/\" className=\"cui-button cui-margin-small-right\">Go Home</Link>\r\n                    {props.goBack ?? <GoBack />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import * as React from 'react'\r\nimport { ProgressPlugin } from 'webpack';\r\nimport { IconLabel } from './IconLabel';\r\n\r\nexport interface ButtonBarProps {\r\n    items: ButtonBarItemProps[];\r\n}\r\n\r\nexport function ButtonBar(props: ButtonBarProps) {\r\n    React.useEffect(() => {\r\n\r\n    }, [props.items])\r\n    return (<ul className=\"cui-list cui-inline\">\r\n        {props.items && props.items.length > 0 && props.items.map((item: ButtonBarItemProps, index: number) => {\r\n            return <ButtonBarItem key={item.icon} icon={item.icon} label={item.label} onClick={item.onClick} modifiers={item.modifiers} />\r\n        })}\r\n    </ul>);\r\n}\r\n\r\n\r\nexport interface ButtonBarItemProps {\r\n    icon: string;\r\n    label: string;\r\n    modifiers?: string;\r\n    onClick: (ev: any) => void;\r\n}\r\n\r\nexport function ButtonBarItem(props: ButtonBarItemProps) {\r\n    let classes = \"cui-button cui-rounded \" + (props.modifiers ?? \"\");\r\n    return (<li className=\"cui-padding-small-horizontal\">\r\n        <a className={classes} cui-icon={props.icon} onClick={props.onClick}><IconLabel label={props.label} /></a>\r\n    </li>);\r\n}","import * as React from 'react'\r\nimport { StopwatchAction } from 'src/core/models';\r\nimport { BpdActionIcon } from './BpdActionIcon';\r\n\r\nexport interface BpdActionLabelProps {\r\n    action: StopwatchAction;\r\n}\r\nexport function BpdActionLabel(props: BpdActionLabelProps) {\r\n    return (\r\n        <div className=\"cui-flex cui-middle\">\r\n            <div className=\"cui-flex-center cui-margin-right\">\r\n                <BpdActionIcon type={props.action.type} />\r\n            </div>\r\n            <div className=\"cui-flex-grow\">\r\n                <div className=\"\">{props.action.name}</div>\r\n                <div className=\"cui-text-muted\">Lasts {props.action.duration} seconds</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react'\r\nimport { StopwatchAction } from 'src/core/models';\r\nimport { BpdActionIcon } from '../common/BpdActionIcon';\r\nimport { BpdActionLabel } from '../common/BpdActionLabel';\r\nimport { ActionsSelectProps } from './ActionsSelect';\r\n\r\nexport function ActionSelectDropdown(props: ActionsSelectProps) {\r\n    function onChange(action: StopwatchAction) {\r\n        if (props.onSelect && (!props.value || props.value.id !== action.id)) {\r\n            props.onSelect(action);\r\n        }\r\n        window.$cui.get(\"#\" + props.id).emit(\"close\");\r\n    }\r\n\r\n    return (<div className=\"cui-drop-trigger cui-block\">\r\n        <a className=\"cui-link cui-block\">\r\n            <DropTrigger action={props.value} />\r\n        </a>\r\n        <div className=\"cui-dropdown drop-height\" cui-drop=\"outClose: Y;\" id={props.id}>\r\n            <ul className=\"cui-drop-nav drop-max-width\">\r\n                {props.actions && props.actions.map(action => {\r\n                    return <li key={action.id}><a className=\"cui-overflow-hidden cui-text-truncate\" onClick={() => { onChange(action) }}><BpdActionLabel action={action} /></a></li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    </div >);\r\n}\r\n\r\ninterface DropTriggerProps {\r\n    action: StopwatchAction;\r\n}\r\n\r\nexport function DropTrigger(props: DropTriggerProps) {\r\n    return (\r\n        <div className=\"cui-flex cui-middle cui-width-1-1\">\r\n            <div className=\"cui-flex-grow\">{props.action ? <BpdActionLabel action={props.action} /> : <span className=\"cui-inline-block cui-padding-small\">No action selected</span>}</div>\r\n            <span cui-icon=\"chevron_small_down\"></span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport function ActionDetailsLabel(props: DropTriggerProps) {\r\n    return (<div className=\"cui-text-truncate cui-overflow-hidden cui-width-1-1\">\r\n        <div>\r\n            <BpdActionIcon type={props.action.type} /><span className=\"cui-margin-small-left\">{props.action.name}</span>\r\n        </div>\r\n        <div>\r\n            <span className=\"cui-text-muted cui-text-small\">(Duration {props.action.duration}s)</span>\r\n        </div>\r\n    </div>)\r\n\r\n    {/* <BpdActionIcon type={props.action.type} /><span className=\"cui-margin-small-left\">{props.action.name}</span><span className=\"cui-text-muted cui-margin-small-left\">({props.action.duration}s)</span></div>) */ }\r\n}","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { are, is } from \"../../../../node_modules/bpd-toolkit/dist/esm/index\";\r\nimport { ACTIONS_FLOW_ACTIONS } from \"../../../app/flow/actions\";\r\nimport { Round, StopwatchAction } from \"../../../core/models\";\r\nimport { getDefaultRoundName } from \"../../../core/statics\";\r\nimport { RoundValidator } from \"../../../core/validators\";\r\nimport { ActionSelectDropdown } from \"../actions/ActionSelectDropdown\";\r\nimport { ActionsSelect } from \"../actions/ActionsSelect\";\r\nimport { BpdActionIcon } from \"../common/BpdActionIcon\";\r\nimport { BpdActionLabel } from \"../common/BpdActionLabel\";\r\nimport { BpdDialog } from \"../common/BpdDialog\";\r\nimport { ErrorsList } from \"../common/ErrorsList\";\r\n\r\nexport interface EditRoundDialogProps {\r\n    onSave: (round: Round, index: number) => void;\r\n    definedActions: StopwatchAction[];\r\n    round: Round;\r\n    index: number;\r\n    currentCount: number;\r\n}\r\n\r\nexport interface EditRoundDialogState {\r\n    name: string;\r\n    actions?: StopwatchAction[];\r\n    selected: StopwatchAction;\r\n    errors: string[];\r\n}\r\n\r\nexport function EditRoundDialog(props: EditRoundDialogProps) {\r\n    const [state, setState] = useState<EditRoundDialogState>({\r\n        actions: [],\r\n        selected: null,\r\n        errors: [],\r\n        name: \"\"\r\n    })\r\n\r\n    function onSave() {\r\n        if (props.onSave) {\r\n            let round: Round = {\r\n                actions: [...state.actions],\r\n                name: state.name\r\n            }\r\n            let validation = new RoundValidator().validate(round);\r\n            if (validation.status) {\r\n                props.onSave(round, props.index);\r\n                setState({\r\n                    ...state,\r\n                    name: getDefaultRoundName(props.currentCount + 1),\r\n                    selected: null,\r\n                    actions: []\r\n                })\r\n                return;\r\n            }\r\n            setState({\r\n                ...state,\r\n                errors: validation.errors\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    function onActionSelectChange(action: StopwatchAction) {\r\n        if (action) {\r\n            setState({\r\n                ...state,\r\n                selected: action\r\n            })\r\n        }\r\n    }\r\n\r\n    function onAddAction() {\r\n        if (state.selected) {\r\n            setStateRoundData([...state.actions, state.selected])\r\n        }\r\n    }\r\n\r\n    function onDeleteAction(index: number) {\r\n        let newActions = [...state.actions];\r\n        newActions.splice(index, 1);\r\n        setStateRoundData(newActions)\r\n    }\r\n\r\n    function setStateRoundData(actions: StopwatchAction[], name?: string) {\r\n        setState({\r\n            ...state,\r\n            actions: actions,\r\n            selected: state.selected ?? props.definedActions[0],\r\n            errors: [],\r\n            name: name ? name : state.name\r\n        })\r\n    }\r\n\r\n    function roundNameUpdate(ev: any) {\r\n        let name = ev.target.value;\r\n        let errors = [];\r\n        if (!is(name)) {\r\n            errors.push(\"Name cannot be empty\")\r\n        }\r\n        setState({\r\n            ...state,\r\n            errors: errors,\r\n            name: name\r\n        })\r\n    }\r\n\r\n    function onSwapAction(index: number) {\r\n        if (!are(state.selected, state.actions)) {\r\n            return;\r\n        }\r\n        let copy = [...state.actions];\r\n        copy[index] = state.selected;\r\n        setState({\r\n            ...state,\r\n            actions: copy\r\n        })\r\n\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let name = props.round && props.round.name ? props.round.name : getDefaultRoundName(props.currentCount);\r\n        let actions = is(props.round) ? props.round.actions : [];\r\n        setStateRoundData(actions, name);\r\n        return () => {\r\n        }\r\n    }, [props.round, props.definedActions, props.currentCount])\r\n    return (<BpdDialog\r\n        id=\"edit-round-dialog\"\r\n        title=\"Edit Round\"\r\n        body={<>\r\n            <div className=\"\">\r\n                <div className=\"cui-form\">\r\n                    <label htmlFor=\"\" className=\"cui-form-label\">Round name</label>\r\n                    <input type=\"text\" className=\"cui-input\" placeholder=\"Round name\" value={state.name} onChange={roundNameUpdate} />\r\n                </div>\r\n                <div className=\"cui-margin-top\">Actions</div>\r\n                <ul className=\"cui-list cui-margin-top edit-round-dialog-body\">\r\n                    {state.actions && state.actions.map((item: StopwatchAction, index: number) => {\r\n                        return <li key={item.id + index} className=\"animation-fade-in\" >\r\n                            <div className=\"cui-flex cui-middle\">\r\n                                <div className=\"cui-flex-grow\">\r\n                                    <BpdActionLabel action={item} />\r\n                                </div>\r\n                                <ul className=\"cui-icon-nav\">\r\n                                    <li><a className=\"cui-icon\" cui-icon=\"swap\" onClick={() => { onSwapAction(index) }}></a></li>\r\n                                    <li><a className=\"cui-icon\" cui-icon=\"trash\" onClick={() => { onDeleteAction(index) }}></a></li>\r\n                                </ul>\r\n                            </div>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n                <div className=\"cui-flex cui-middle cui-nowrap cui-margin-top\">\r\n                    <div className=\"cui-flex-grow\">\r\n                        <ActionSelectDropdown value={state.selected} actions={props.definedActions} onSelect={onActionSelectChange} name=\"actioonaa\" id=\"round-select-drop\" />\r\n                    </div>\r\n                    <div className=\"cui-padding-horizontal\">\r\n                        <button cui-icon=\"plus\" className=\"cui-icon cui-icon-button\" onClick={onAddAction}></button>\r\n                    </div>\r\n                </div>\r\n                <ErrorsList errors={state.errors} />\r\n            </div>\r\n        </>\r\n        }\r\n        footer={\r\n            <div className=\"cui-flex cui-right\" >\r\n                <button className=\"cui-button cui-margin-small-right\" cui-close=\"\">Cancel</button>\r\n                <button className=\"cui-button cui-accent\" onClick={onSave}>Save</button>\r\n            </div >\r\n        }\r\n    />)\r\n}","import * as React from 'react';\r\nimport { calculateDuration, getUserDisplayNotation } from '../../../core/helpers';\r\nimport { Round } from \"../../../core/models\";\r\nimport { getDefaultRoundName } from '../../../core/statics';\r\nimport { BpdConfirmDrop } from '../common/BpdConfirmDrop';\r\n\r\ninterface RoundListItemProps {\r\n    round: Round;\r\n    index: number;\r\n    isFirst: boolean;\r\n    isLast: boolean;\r\n    onEdit: (round: Round, index: number) => void;\r\n    onDelete: (round: Round, index: number) => void;\r\n    onMoveDown: (round: Round, index: number) => void;\r\n    onMoveUp: (round: Round, index: number) => void;\r\n    onClone: (round: Round, index: number) => void;\r\n}\r\n\r\nexport function EditRoundListItem(props: RoundListItemProps) {\r\n\r\n    return (\r\n        <div className=\"cui-flex cui-middle cui-nowrap\">\r\n            <div className=\"cui-flex-grow\">\r\n                <div><span className=\"cui-text-bold\">{props.round.name}</span></div>\r\n                <div className=\"cui-text-muted cui-text-small cui-text-no-wrap\"><span >{props.round.actions.length} actions, {getUserDisplayNotation(calculateDuration(props.round.actions))}</span></div>\r\n\r\n            </div>\r\n\r\n            <ul className=\"cui-icon-nav cui-flex-shrink\">\r\n                {!props.isFirst && <li><a className=\"cui-icon\" cui-icon=\"chevron_up\" onClick={() => { props.onMoveUp(props.round, props.index) }} cui-tooltip=\"Move up\"></a></li>}\r\n                {!props.isLast && <li><a className=\"cui-icon\" cui-icon=\"chevron_down\" onClick={() => { props.onMoveDown(props.round, props.index) }} cui-tooltip=\"Move down\"></a></li>}\r\n                <li><a className=\"cui-icon\" cui-icon=\"copy\" onClick={() => { props.onClone(props.round, props.index) }} cui-tooltip=\"Clone\"></a></li>\r\n                <li><a className=\"cui-icon\" cui-icon=\"edit\" onClick={() => { props.onEdit(props.round, props.index) }} cui-tooltip=\"Edit\"></a></li>\r\n                <li><div className=\"cui-drop-trigger\">\r\n                    <a className=\"cui-icon\" cui-icon=\"trash\"></a>\r\n                    <BpdConfirmDrop id=\"delete-confirm-drop\" message=\"Do you really want to delete this round?\" cancelLabel=\"No\" confirmLabel=\"Yes\" onConfirm={() => {\r\n                        props.onDelete(props.round, props.index);\r\n                    }} />\r\n                </div></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}","import * as React from 'react'\r\n\r\nexport interface BpdDialogFooterProps {\r\n    confirmLabel: string;\r\n    onConfirm: () => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport function BpdDialogFooter(props: BpdDialogFooterProps) {\r\n    return (<div className=\"cui-flex cui-right cui-middle\">\r\n        <button className=\"cui-button\" onClick={props.onCancel}>Cancel</button>\r\n        <button className=\"cui-button cui-accent cui-margin-small-left\" onClick={props.onConfirm}>{props.confirmLabel}</button>\r\n    </div>);\r\n}\r\n","import * as React from 'react'\r\nimport { buildQuickRoundActions, groupActionsByType } from '../../../core/helpers';\r\nimport { ActionsGroup, Round, RoundActions, StopwatchAction, StopwatchActionType } from '../../../core/models';\r\nimport { ActionSelectDropdown } from '../actions/ActionSelectDropdown';\r\nimport { BpdDialog } from '../common/BpdDialog';\r\nimport { BpdDialogFooter } from '../common/BpdDialogFooter';\r\n\r\n\r\nexport interface QuickRoundDialogProps {\r\n    actions: StopwatchAction[];\r\n    onSave: (round: Round) => void;\r\n    id: string;\r\n}\r\n\r\nexport function QuickRoundDialog(props: QuickRoundDialogProps) {\r\n    const groupedActions = React.useMemo<ActionsGroup>(() => {\r\n        return groupActionsByType(props.actions)\r\n    }, [props.actions])\r\n\r\n    const [actions, setActions] = React.useState<RoundActions>({\r\n        warmup: groupedActions['warmup'] ? groupedActions['warmup'][0] : null,\r\n        exercise: groupedActions['exercise'] ? groupedActions['exercise'][0] : null,\r\n        break: groupedActions['break'] ? groupedActions['break'][0] : null,\r\n        cooldown: groupedActions['cooldown'] ? groupedActions['cooldown'][0] : null\r\n    });\r\n\r\n    const [exerciseCount, setExerciseCount] = React.useState(1);\r\n\r\n    function onUpdate(data: StopwatchAction, type: string) {\r\n        setActions({\r\n            ...actions,\r\n            [type]: data\r\n        })\r\n\r\n        // props.onUpdate(data)\r\n    }\r\n\r\n    function onCounterUpdate(value: number) {\r\n        setExerciseCount(value);\r\n    }\r\n\r\n    function onDialogCancel() {\r\n        window.$cui.get(\"#\" + props.id).emit(\"close\");\r\n    }\r\n\r\n    function onConfirm() {\r\n        if (exerciseCount < 1) {\r\n            return;\r\n        }\r\n        let round: Round = {\r\n            name: \"Quick\",\r\n            actions: buildQuickRoundActions(actions, exerciseCount)\r\n        }\r\n        props.onSave(round);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setActions({\r\n            warmup: groupedActions['warmup'] ? groupedActions['warmup'][0] : null,\r\n            break: groupedActions['break'] ? groupedActions['break'][0] : null,\r\n            exercise: groupedActions['exercise'] ? groupedActions['exercise'][0] : null,\r\n            cooldown: groupedActions['cooldown'] ? groupedActions['cooldown'][0] : null,\r\n        })\r\n        return () => {\r\n\r\n        }\r\n    }, [props.actions])\r\n    return (<BpdDialog title=\"Quick Round\"\r\n        id={props.id}\r\n        body={<QuickRoundDialogBody actions={groupedActions} onUpdate={onUpdate} data={actions} count={exerciseCount} onCounterUpdate={onCounterUpdate} />}\r\n        footer={<BpdDialogFooter confirmLabel=\"Save\" onCancel={onDialogCancel} onConfirm={onConfirm} />}\r\n    />);\r\n}\r\n\r\n\r\nexport interface QuickRoundDialogBodyProps {\r\n    actions: ActionsGroup;\r\n    data: RoundActions;\r\n    count: number;\r\n    onUpdate: (action: StopwatchAction, type: string) => void;\r\n    onCounterUpdate: (value: number) => void;\r\n}\r\n\r\nexport function QuickRoundDialogBody(props: QuickRoundDialogBodyProps) {\r\n\r\n    function updateCounter(count: number) {\r\n        if (count > 0 && count < 12) {\r\n            props.onCounterUpdate(count);\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <div>\r\n            <QuickRoundDialogSelect actions={props.actions[StopwatchActionType.WARMUP]} value={props.data.warmup} onUpdate={props.onUpdate} type={StopwatchActionType.WARMUP} id=\"warmup-select-drop\" name=\"warmup-action\" />\r\n        </div>\r\n        <div className=\"cui-margin-top\">\r\n            <QuickRoundDialogSelect actions={props.actions[StopwatchActionType.EXERCISE]} value={props.data.exercise} onUpdate={props.onUpdate} type={StopwatchActionType.EXERCISE} id=\"exercise-select-drop\" name=\"exercise-action\" />\r\n        </div>\r\n        <div className=\"cui-form cui-margin-top\">\r\n            <QuickRoundDialogSelect actions={props.actions[StopwatchActionType.BREAK]} value={props.data.break} onUpdate={props.onUpdate} type={StopwatchActionType.BREAK} id=\"break-select-drop\" name=\"break-action\" />\r\n        </div>\r\n        <div className=\"cui-margin-top\">\r\n            <QuickRoundDialogSelect actions={props.actions[StopwatchActionType.COOLDOWN]} value={props.data.cooldown} onUpdate={props.onUpdate} type={StopwatchActionType.COOLDOWN} id=\"cooldown-select-drop\" name=\"cooldown-action\" />\r\n        </div>\r\n        <div className=\"cui-form cui-margin-top\">\r\n            <label className=\"cui-form-label\">Number of exercises</label>\r\n            <div className=\"cui-flex cui-middle cui-margin-small-top\">\r\n                <button className=\"cui-icon-button\" cui-icon=\"minus\" onClick={() => updateCounter(props.count - 1)}></button>\r\n                <span className=\"cui-margin-horizontal\">{props.count}</span>\r\n                <button className=\"cui-icon-button\" cui-icon=\"plus\" onClick={() => updateCounter(props.count + 1)}></button>\r\n            </div>\r\n        </div>\r\n    </>;\r\n}\r\n\r\nexport interface QuickRoundDialogSelectProps {\r\n    type: string;\r\n    actions: StopwatchAction[];\r\n    value: StopwatchAction;\r\n    id: string;\r\n    name: string;\r\n    onUpdate: (actions: StopwatchAction, type: string) => void;\r\n}\r\n\r\nexport function QuickRoundDialogSelect(props: QuickRoundDialogSelectProps) {\r\n    return (<>\r\n        <span className=\"cui-text-capital cui-inline-block\">{props.type}</span>\r\n        <div className=\"cui-flex cui-middle cui-margin-small-top\">\r\n            <div className=\"cui-flex-grow\">\r\n                <ActionSelectDropdown value={props.value} actions={props.actions} onSelect={(value) => { props.onUpdate(value, props.type) }} name={props.name} id={props.id} />\r\n            </div>\r\n            <button className=\"cui-icon-button\" cui-icon=\"close\" onClick={() => { props.onUpdate(null, \"cooldown\") }}></button>\r\n        </div>\r\n    </>)\r\n}","import * as React from 'react'\r\nimport { Link, useParams, withRouter } from 'react-router-dom';\r\nimport { ACTIONS } from '../../../app/flow/trainings';\r\nimport { clone, is } from '../../../../node_modules/bpd-toolkit/dist/esm/index';\r\nimport { ACTIONS_FLOW_ACTIONS } from '../../../app/flow/actions';\r\nimport { insert, move, setNavbarTitle, setPageTitle, showMessage, showToast } from '../../../core/helpers';\r\nimport { Round, StopwatchAction, Training, TrainingState } from '../../../core/models';\r\nimport { DefaultActions } from '../../../core/statics';\r\nimport { TrainingValidator } from '../../../core/validators';\r\nimport { MAPPIGNS } from '../../routes';\r\nimport { onDeleteTrainingDialog } from '../common/Dialogs';\r\nimport { NotFound } from '../common/NotFound';\r\nimport { PageHeader } from '../common/PageHeader';\r\nimport { ButtonBar, ButtonBarItemProps } from './ButtonBar';\r\nimport { EditRoundDialog } from './EditRoundDialog';\r\nimport { EditRoundListItem } from './EditRoundListItem';\r\nimport { QuickRoundDialog } from './QuickRoundDialog';\r\nimport { Loading } from '../common/Loading';\r\n\r\nexport interface EditTrainingSectionProps {\r\n    training: Training;\r\n    //   onSave: (training: Training) => void;\r\n    onUpdate: (training: Training) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\n\r\nexport interface EditTrainingProps {\r\n    history: any;\r\n}\r\n\r\ninterface EditTrainingState {\r\n    training: Training;\r\n}\r\n\r\ninterface EditTrainingSectionState {\r\n    currentIndex: number;\r\n    currentRound: Round;\r\n    currentCount: number;\r\n}\r\n\r\ninterface EditTrainingDefinedActions {\r\n    actions: StopwatchAction[];\r\n}\r\n\r\nfunction EditTraining(props: EditTrainingProps) {\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [state, setState] = React.useState<EditTrainingState>({\r\n        training: {\r\n            name: \"\",\r\n            rounds: [],\r\n            state: TrainingState.NEW\r\n        }\r\n    })\r\n    const [notFound, setNotFound] = React.useState(false);\r\n    const { id } = useParams();\r\n\r\n\r\n    function getTraining() {\r\n        setIsLoading(true);\r\n        if (id) {\r\n            window.$flow.perform(ACTIONS.GET_FOR_EDIT, id);\r\n        } else {\r\n            window.$flow.perform(ACTIONS.GET_DRAFT);\r\n        }\r\n    }\r\n\r\n    function onUpdate(training: Training) {\r\n        pushDraft(training)\r\n    }\r\n\r\n    function onUpdateTraining(result: boolean): void {\r\n        if (!result) {\r\n            showMessage(\"Fail\", \"Training was not saved\")\r\n        } else {\r\n            showToast(\"Saved\");\r\n            goBack();\r\n        }\r\n    }\r\n\r\n    function goBack() {\r\n        if (props.history) {\r\n            props.history.goBack();\r\n        }\r\n    }\r\n\r\n    function onGetTraining(training: Training): void {\r\n        setIsLoading(false);\r\n        if (training) {\r\n            setPageTitle(\"Edit \" + training.name);\r\n            setState({\r\n                training: { ...training }\r\n            })\r\n        } else {\r\n            setNotFound(true);\r\n            // showMessage(\"Fail\", \"Training was not found\")\r\n        }\r\n    }\r\n\r\n    function onGetDraft(training: Training) {\r\n        setIsLoading(false);\r\n        if (training && !is(training.id)) {\r\n            setState({\r\n                training: { ...training }\r\n            })\r\n        }\r\n    }\r\n\r\n    function pushDraft(training: Training) {\r\n        window.$flow.perform(ACTIONS.SET_DRAFT, training);\r\n        setState({\r\n            training: { ...training, state: TrainingState.DRAFT }\r\n        })\r\n    }\r\n\r\n    function onTrainingSave() {\r\n        let validaton = new TrainingValidator().validate(state.training);\r\n        if (validaton.status) {\r\n            window.$flow.perform(ACTIONS.UPDATE_TRAINING, state.training)\r\n        } else {\r\n            showMessage(\"Training not valid\", validaton.errors.join(\", \"))\r\n        }\r\n    }\r\n\r\n    function onDeleteTraining() {\r\n        if (is(state.training.id) && state.training.state === TrainingState.PUBLISH)\r\n            onDeleteTrainingDialog(state.training.name, onYes)\r\n        else {\r\n            showToast(\"Draft removed\");\r\n            // For not published trainings\r\n            window.$flow.perform(ACTIONS.CLEAR_DRAFT);\r\n            goBack();\r\n        }\r\n\r\n    }\r\n\r\n    function onYes() {\r\n        window.$flow.perform(\"DELETE_TRAINING\", state.training.id)\r\n    }\r\n\r\n    function onDeleteTrainingSub(result: boolean) {\r\n        showToast(\"Removed\");\r\n        goBack();\r\n    }\r\n\r\n    function getButtonNavItems(): ButtonBarItemProps[] {\r\n        const buttonNavItems: ButtonBarItemProps[] = [];\r\n        //{ icon: \"close\", label: \"Cancel\", onClick: () => { goBack() } }];\r\n        if (is(state.training.id)) {\r\n            buttonNavItems.push({ icon: \"media_play\", label: \"Run\", onClick: () => { props.history.push(MAPPIGNS.renderUrl('perform', { id: state.training.id })) } })\r\n        }\r\n\r\n        if (state.training.state !== TrainingState.NEW) {\r\n            buttonNavItems.push({ icon: \"trash\", label: \"Delete\", onClick: () => { onDeleteTraining() } });\r\n        }\r\n\r\n        buttonNavItems.push({ icon: \"checkmark\", label: \"Save\", onClick: onTrainingSave, modifiers: \"cui-success\" });\r\n        return buttonNavItems;\r\n    }\r\n\r\n    function getPageName(): string {\r\n        if (!is(state.training) || !is(state.training.name)) {\r\n            return \"Define training\";\r\n        }\r\n\r\n        return `Update ${state.training.state === TrainingState.DRAFT ? \"draft\" : \"training\"} ${state.training.name}`;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(\"Edit training\");\r\n        setNavbarTitle(\"Edit training\");\r\n        const updateTrainingSub = window.$flow.subscribe(\"UPDATE_TRAINING\", { finish: onUpdateTraining })\r\n        const getTrainingSub = window.$flow.subscribe(ACTIONS.GET_FOR_EDIT, { finish: onGetTraining })\r\n        const getDraftSub = window.$flow.subscribe(\"GET_DRAFT\", { finish: onGetDraft })\r\n        const deleteTraininSub = window.$flow.subscribe(\"DELETE_TRAINING\", {\r\n            finish: onDeleteTrainingSub\r\n        })\r\n        getTraining();\r\n\r\n        return () => {\r\n            window.$flow.unsubscribe(\"UPDATE_TRAINING\", updateTrainingSub.id);\r\n            window.$flow.unsubscribe(ACTIONS.GET_FOR_EDIT, getTrainingSub.id);\r\n            window.$flow.unsubscribe(\"DELETE_TRAINING\", deleteTraininSub.id);\r\n            window.$flow.unsubscribe(\"GET_DRAFT\", getDraftSub.id);\r\n        }\r\n    }, [state.training.id])\r\n\r\n\r\n    if (isLoading) {\r\n        return <Loading />\r\n    } else if (notFound) {\r\n        return <NotFound message=\"The training you looking for could not be found\" classes=\"\" />\r\n    } else if (!state.training) {\r\n        return <span></span>;\r\n    }\r\n    return (<>\r\n        <div className=\"edit-container\">\r\n            <div className=\"edit-container-content cui-overflow-y-auto\">\r\n                <PageHeader title={getPageName()} description=\"Customize your training settings\" icon=\"dumbbell\" />\r\n                <EditTrainingSection training={state.training} onUpdate={onUpdate} onCancel={goBack} />\r\n            </div>\r\n            <div className=\"edit-container-bottom cui-padding-small-vertical cui-border-top cui-border-remove--l cui-flex stopwatch-content-width\">\r\n                <div className=\"stopwatch-content-width cui-flex cui-middle cui-center\">\r\n                    <ButtonBar items={\r\n                        getButtonNavItems()\r\n                    } />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\n\r\n\r\nfunction EditTrainingSection(props: EditTrainingSectionProps) {\r\n    const [state, setState] = React.useState<EditTrainingSectionState>({\r\n        currentIndex: -1,\r\n        currentCount: 0,\r\n        currentRound: null\r\n    })\r\n\r\n    const [definedActions, setDefinedActions] = React.useState<EditTrainingDefinedActions>({\r\n        actions: []\r\n    })\r\n\r\n\r\n    function onRoundEdit(round: Round, index: number) {\r\n        setState({\r\n            ...state,\r\n            currentIndex: index,\r\n            currentRound: round,\r\n            currentCount: props.training && props.training.rounds ? props.training.rounds.length : 0\r\n        })\r\n        window.$cui.get(\"#edit-round-dialog\").emit(\"open\")\r\n    }\r\n\r\n    function onRoundDelete(round: Round, index: number) {\r\n        let rounds = [...props.training.rounds]\r\n        rounds.splice(index, 1)\r\n        updateRoundsState(rounds)\r\n    }\r\n\r\n    function onRoundDown(round: Round, index: number) {\r\n        updateRoundsState(move(props.training.rounds, index, index + 1))\r\n    }\r\n\r\n\r\n    function onRoundUp(round: Round, index: number) {\r\n        updateRoundsState(move(props.training.rounds, index, index - 1))\r\n    }\r\n\r\n    function onRoundClone(round: Round, index: number) {\r\n        let idx = index + 1;\r\n        let cloned = clone(round);\r\n        updateRoundsState(insert(props.training.rounds, idx, cloned))\r\n    }\r\n\r\n    function onRoundSave(round: Round, index: number) {\r\n        updateRoundsState(updateOrInsertRound(round, index));\r\n        window.$cui.get(\"#edit-round-dialog\").emit(\"close\");\r\n    }\r\n\r\n    function updateOrInsertRound(round: Round, index: number) {\r\n        let rounds = []\r\n        if (index > -1) {\r\n            rounds = [...props.training.rounds];\r\n            rounds[index] = round;\r\n        } else {\r\n            rounds = [...props.training.rounds, round];\r\n        }\r\n        return rounds;\r\n    }\r\n\r\n    function updateRoundsState(rounds: Round[]) {\r\n        props.onUpdate(\r\n            {\r\n                ...props.training,\r\n                rounds: rounds\r\n            }\r\n        )\r\n    }\r\n\r\n    function onFormChange(ev: any) {\r\n        let name = ev.target.name;\r\n        if (['name', 'description'].includes(name)) {\r\n            props.onUpdate({\r\n                ...props.training,\r\n                [name]: ev.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    function OnQuickRoundClick() {\r\n        window.$cui.get(\"#quick-round-create\").emit(\"open\")\r\n    }\r\n\r\n    function onQuickRoundSave(round: Round) {\r\n        updateRoundsState(updateOrInsertRound(round, -1));\r\n        window.$cui.get(\"#quick-round-create\").emit(\"close\");\r\n    }\r\n\r\n    function getDefinedActions(actions: StopwatchAction[]) {\r\n        setDefinedActions({\r\n            actions: [...DefaultActions, ...actions]\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const getDefinedActionsSub = window.$actionsFlow.subscribe(ACTIONS_FLOW_ACTIONS.GET_ALL, { finish: getDefinedActions });\r\n        window.$actionsFlow.perform(ACTIONS_FLOW_ACTIONS.GET_ALL);\r\n        setState({\r\n            ...state\r\n        })\r\n        return () => {\r\n            window.$actionsFlow.unsubscribe(ACTIONS_FLOW_ACTIONS.GET_ALL, getDefinedActionsSub.id)\r\n\r\n        }\r\n    }, [props.training])\r\n\r\n    return (<>\r\n        <div className=\"cui-container stopwatch-content-width cui-flex-grid cui-child-width-1-1 cui-child-width-1-2--m\">\r\n            <div className=\"cui-padding-small-right\">\r\n                {/* <h3 className=\"cui-h3 cui-text-muted\">Common</h3> */}\r\n                <div className=\"cui-form\">\r\n                    <label htmlFor=\"\" className=\"cui-form-label\">Name</label>\r\n                    <input type=\"text\" className=\"cui-input stopwatch-input-width\" placeholder=\"Name\" name=\"name\" value={props.training.name} onChange={onFormChange} />\r\n                </div>\r\n                <div className=\"cui-form cui-margin-top\">\r\n                    <label htmlFor=\"\" className=\"cui-form-label\">Description</label>\r\n                    <textarea className=\"cui-textarea stopwatch-input-width stopwatch-text-area\" placeholder=\"Description\" name=\"description\" rows={5} value={props.training.description} onChange={onFormChange}></textarea>\r\n                </div>\r\n            </div>\r\n            <div className=\"cui-padding-small-left\">\r\n                {/* <h3 className=\"cui-h3 cui-text-muted\">Rounds (total count: {props.training.rounds.length})</h3> */}\r\n                <ul className=\"cui-list\">\r\n                    {props.training && props.training.rounds.map((round: Round, index: number, arr: Round[]) => {\r\n                        return <li key={index} className=\"animation-fade-in\"><EditRoundListItem\r\n                            index={index}\r\n                            round={round}\r\n                            onEdit={onRoundEdit}\r\n                            onDelete={onRoundDelete}\r\n                            onMoveUp={onRoundUp}\r\n                            onMoveDown={onRoundDown}\r\n                            onClone={onRoundClone}\r\n                            isFirst={index === 0}\r\n                            isLast={index === arr.length - 1} />\r\n                        </li>\r\n                    })}\r\n                    <li>\r\n                        <div className=\"cui-flex-grid cui-center cui-child-width-1-2--m\">\r\n                            <div className=\"\">\r\n                                <button className=\"cui-button cui-default cui-icon cui-icon-margin cui-width-1-1\" cui-icon=\"plus\" onClick={() => {\r\n                                    onRoundEdit(null, -1);\r\n                                }}>Add Round</button>\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"cui-button cui-accent cui-icon cui-icon-margin cui-width-1-1\" cui-icon=\"bolt\" onClick={OnQuickRoundClick}>Quick Round</button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <EditRoundDialog index={state.currentIndex} round={state.currentRound} onSave={onRoundSave} currentCount={state.currentCount} definedActions={definedActions.actions} />\r\n        <QuickRoundDialog id=\"quick-round-create\" actions={definedActions.actions} onSave={onQuickRoundSave} />\r\n    </>);\r\n}\r\n\r\nexport default withRouter(EditTraining);","export function onDeleteTrainingDialog(name: string, onConfirm: () => void) {\r\n    window.$cui.alert(\"delete-training-dialog\", \"YesNoCancel\", {\r\n        title: \"Delete training\",\r\n        message: \"Do you really want to delete training: \" + name + \"?\",\r\n        onYes: onConfirm\r\n    })\r\n}\r\n\r\nexport function deleteRoundConfirmDialog(onOnfirm: () => void) {\r\n    window.$cui.alert(\"delete-round-dialog\", \"YesNoCancel\", {\r\n        title: \"Delete round\",\r\n        message: \"Do you really want to delete this round?\",\r\n        onYes: onOnfirm\r\n    })\r\n}\r\n\r\nexport function deleteActionConfirmDialog(name: string, onConfirm: () => void) {\r\n    window.$cui.alert(\"delete-action-dialog\", \"YesNoCancel\", {\r\n        title: \"Delete action\",\r\n        message: \"Do you really want to delete action: \" + name,\r\n        onYes: onConfirm\r\n    })\r\n}"],"sourceRoot":""}