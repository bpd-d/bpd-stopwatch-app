{"version":3,"sources":["webpack:///./src/ui/hooks/settings.tsx","webpack:///./src/ui/components/common/GoBack.tsx","webpack:///./src/ui/components/common/NotFound.tsx","webpack:///./src/api/screen/screen.ts","webpack:///./src/api/stopwatch/stopwatch.ts","webpack:///./src/ui/hooks/useResize.tsx","webpack:///./src/ui/components/perform/TrainingSoundPlayer.tsx","webpack:///./src/ui/hooks/AudioContext.ts","webpack:///./src/ui/components/common/IconButton.tsx","webpack:///./src/ui/components/perform/PerformButtonBar.tsx","webpack:///./src/ui/components/perform/countdown/CountdownTimers.tsx","webpack:///./src/ui/components/perform/PerformTraining.tsx","webpack:///./src/ui/hooks/loading.tsx","webpack:///./src/ui/components/perform/hook.tsx","webpack:///./src/ui/components/perform/countdown/functions.tsx"],"names":["useSettings","React","DefaultSettings","settings","setSettings","onSaveSettings","window","$settingsFlow","perform","SETTINGS_FLOW_ACTIONS","GET_SETTINGS","onGetSettings","setDarkMode","darkMode","settingsSub","subscribe","finish","settingsUpdateSub","SET_SETTINGS","unsubscribe","id","soundEnabled","withRouter","props","history","className","onClick","goBack","NotFound","classes","message","to","KeepAwakeToggle","this","screen","keepAwake","LoopLockScreen","element","undefined","createElement","document","body","appendChild","remove","src","newEl","autoplay","muted","loop","classList","add","textContent","KeepScreenAwakeFeature","getToggle","activate","release","StopWatchStateOptions","StopWatch","callback","setTimeout","tick","stop","e","console","error","clearTimeout","useIsFullscreen","onResize","addEventListener","removeEventListener","useResize","is","setIsFullscreen","isElementFullscreen","isFullscreen","clientHeight","availHeight","height","clientWidth","availWidth","width","TrainingSoundPlayer","countdownSound","exerciseSound","warmupSound","breakSound","cooldownSound","endSound","endSoundTrack","countdownSoundTrack","exerciseSoundTrack","warmupSoundTrack","breakSoundTrack","cooldownSoundTrack","AudioContext","playSound","type","current","currentTime","resume","play","createMediaElementSource","connect","destination","children","createArray","map","child","ref","IconButton","modifiers","cui-icon","icon","PerformerButtonBar","startBtnText","startBtnCls","pauseBtnText","isPauseVisible","startBtnIcon","pauseBtnIcon","controls","setControls","state","updatePlayStateControls","playState","soundIcon","onMute","onPauseResume","onStartStop","fullscreenIcon","onFullScreen","CountDownTimer","watchState","round","name","roundIdx","roundTotal","cui-circle-progress","trainingProgress","roundProgress","progress","actionIdx","timerCls","timer","NewCountDownTimer","value","max","SimpleCountDownTimer","getTextClassByActionType","action","actionTotal","calcDisplayTimer","PerfromTraining","init","loading","training","setState","flag","log","isLoading","setIsLoading","notFound","setNotFound","useParams","onGetTraining","validation","CompleteTrainingValidator","validate","status","showMessage","errors","join","setPageTitle","getTrainingSubscription","$flow","Loading","PerformTrainingElement","errorMessage","setErrorMessage","wakeLock","setNavbarTitle","TrainingPerformer","key","callError","cui-tooltip","stopwatch","setStopwatch","onTick","useStopwatch2","setOnTick","roundDuration","totalDuration","setWatchState","stopWatchRef","watchStateRef","settingsRef","mainViewRef","setDefaultWatchState","rounds","actions","length","calculateDuration","getTotalDuration","onStopwatchTick","total","actionDuration","parseInt","duration","ct","calculateProgress","updateStopWatchState","getState","time","nextActionIdx","newAction","nextRoundIdx","newRound","setNextAction","reset","watchstate","timeData","reduce","result","act","idx","calculateRoundCurrentTime","trainginProgress","calculateTrainingProgress","getBgClassByType","getCountDownTimer","countdownView","closeFullscreen","openFullscreen","start","pause"],"mappings":"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","file":"stopwatch.8.js","sourcesContent":["import * as React from 'react'\r\nimport { DefaultSettings } from '../../core/statics';\r\nimport { Settings } from '../../core/models';\r\nimport { SETTINGS_FLOW_ACTIONS } from '../../app/flow/settings';\r\nimport { setDarkMode } from '../../core/helpers';\r\n\r\nexport function useSettings(): [Settings, (settings: Settings) => void] {\r\n    const [settings, setSettings] = React.useState({\r\n        ...DefaultSettings\r\n    })\r\n\r\n    function onSaveSettings() {\r\n        // Obtain settings from store\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.GET_SETTINGS);\r\n    }\r\n\r\n    function onGetSettings(settings: Settings) {\r\n        setSettings(settings);\r\n        setDarkMode(settings.darkMode);\r\n    }\r\n\r\n    function updateSettings(settings: Settings) {\r\n        window.$settingsFlow.perform(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settings);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const settingsSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, { finish: onGetSettings })\r\n        const settingsUpdateSub = window.$settingsFlow.subscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, { finish: onSaveSettings })\r\n        onSaveSettings();\r\n        return () => {\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.GET_SETTINGS, settingsSub.id);\r\n            window.$settingsFlow.unsubscribe(SETTINGS_FLOW_ACTIONS.SET_SETTINGS, settingsUpdateSub.id);\r\n        }\r\n    }, [settings.darkMode, settings.soundEnabled])\r\n\r\n    return [settings, updateSettings];\r\n}\r\n","import * as React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction GoBack(props: any) {\r\n    const { history } = props;\r\n    return (<button className=\"cui-button cui-accent\" onClick={() => history.goBack()}>Go Back</button>)\r\n}\r\n\r\n\r\nexport default withRouter(GoBack);","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport GoBack from \"./GoBack\";\r\n\r\nexport interface NotFoundProps {\r\n    message: string;\r\n    classes?: string;\r\n    goBack?: boolean;\r\n}\r\n\r\nexport function NotFound(props: NotFoundProps) {\r\n    return (<div className={props.classes}>\r\n        <div>\r\n            <h2 className=\"cui-h2 cui-text-center cui-text-error\">{props.message}</h2>\r\n            <div className=\"\">\r\n                <div className=\"cui-flex cui-center\">\r\n                    <Link to=\"/\" className=\"cui-button cui-margin-small-right\">Go Home</Link>\r\n                    {props.goBack ?? <GoBack />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","interface KeepScreenToggle {\r\n    activate(): void;\r\n    release(): void;\r\n}\r\n\r\nexport class KeepAwakeToggle implements KeepScreenToggle {\r\n    #screen: any;\r\n    constructor() {\r\n        this.#screen = screen;\r\n    }\r\n\r\n    activate() {\r\n        this.#screen.keepAwake = true;\r\n    }\r\n\r\n    release(): void {\r\n        this.#screen.keepAwake = false;\r\n    }\r\n\r\n}\r\n\r\nexport class WakeLockScreen implements KeepScreenToggle {\r\n    wakeLockRequest: any;\r\n\r\n    activate() {\r\n        let nav = navigator as any;\r\n        nav.wakeLock.request('screen').then((wakelock: any) => {\r\n            this.wakeLockRequest = wakelock;\r\n            console.log(\"Wakelock activated\");\r\n        })\r\n    }\r\n\r\n    release() {\r\n        if (this.wakeLockRequest) {\r\n            this.wakeLockRequest.release();\r\n            this.wakeLockRequest = null;\r\n            console.log(\"Wakelock deactivated\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class LoopLockScreen implements KeepScreenToggle {\r\n    element: Element | undefined;\r\n\r\n    constructor() {\r\n        this.element = undefined;\r\n    }\r\n\r\n    activate(): void {\r\n        if (this.element) {\r\n            return;\r\n        }\r\n        this.element = this.createElement(\"/static/video/Screen.mp4\");\r\n        document.body.appendChild(this.element);\r\n    }\r\n\r\n    release(): void {\r\n        if (!this.element) {\r\n            return;\r\n        }\r\n        this.element.remove();\r\n        this.element = undefined;\r\n    }\r\n\r\n    private createElement(src: string): Element {\r\n        let newEl = document.createElement(\"video\");\r\n        newEl.autoplay = true;\r\n        newEl.muted = true;\r\n        newEl.loop = true;\r\n        newEl.src = src;\r\n        newEl.classList.add('loop-screen')\r\n        newEl.textContent = \"Not Supported\";\r\n        return newEl;\r\n    }\r\n\r\n}\r\n\r\nexport class KeepScreenAwakeFeature {\r\n    #toggle: KeepScreenToggle;\r\n\r\n    constructor() {\r\n        this.#toggle = this.getToggle();\r\n    }\r\n    activate() {\r\n        this.#toggle.activate();\r\n    }\r\n    release() {\r\n        this.#toggle.release();\r\n    }\r\n    private getToggle() {\r\n        if ('keepAwake' in screen) {\r\n            return new KeepAwakeToggle();\r\n        } else {\r\n            return new LoopLockScreen();\r\n            //return new WakeLockScreen();\r\n        }\r\n    }\r\n}","export const StopWatchStateOptions: any = {\r\n    RUNNING: \"RUNNING\",\r\n    STOPPED: \"STOPPED\",\r\n    PAUSED: \"PAUSED\",\r\n}\r\n\r\nexport type StopWatchPerformState = \"RUNNING\" | 'PAUSED' | \"STOPPED\";\r\n\r\nexport interface StopwatchCallback {\r\n    (current: number, total: number, stopWatch: StopWatch): boolean;\r\n}\r\n\r\nexport interface IStopWatch {\r\n    start(): boolean;\r\n    stop(): boolean;\r\n    pause(): boolean;\r\n    resume(): boolean;\r\n    finish(): void;\r\n    getState(): StopWatchPerformState;\r\n}\r\n\r\nexport class StopWatch implements IStopWatch {\r\n    #callback: StopwatchCallback;\r\n    #current: number;\r\n    #total: number;\r\n    #isReset: boolean;\r\n    #state: StopWatchPerformState;\r\n    #id: any;\r\n    constructor() {\r\n        this.#current = 0;\r\n        this.#total = 0;\r\n        this.#isReset = false;\r\n        this.#state = StopWatchStateOptions.STOPPED;\r\n        this.#id = undefined;\r\n    }\r\n\r\n    onTick(callback: StopwatchCallback) {\r\n        this.#callback = callback;\r\n    }\r\n\r\n    tick() {\r\n        this.#id = setTimeout(() => {\r\n            try {\r\n                if (this.#state === StopWatchStateOptions.RUNNING && this.#callback && this.#callback(this.#current, this.#total, this)) {\r\n                    if (this.#isReset) {\r\n                        this.#current = 0;\r\n                        this.#isReset = false;\r\n                    } else {\r\n                        this.#current += 1;\r\n                        this.#total += 1;\r\n                    }\r\n                    this.tick();\r\n                } else if (this.#state !== StopWatchStateOptions.PAUSED) {\r\n                    this.stop();\r\n                }\r\n            } catch (e) {\r\n                console.error(\"An error occured on stopwatch tick\")\r\n                console.error(e)\r\n                this.stop();\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    reset() {\r\n        this.#isReset = true;\r\n    }\r\n\r\n    start(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            return false;\r\n        }\r\n        this.#current = 0;\r\n        this.#state = StopWatchStateOptions.RUNNING;\r\n        this.tick();\r\n        return true;\r\n    }\r\n\r\n    stop(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            this.finish();\r\n            this.#state = StopWatchStateOptions.STOPPED;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    pause(): boolean {\r\n        if (this.#state === StopWatchStateOptions.RUNNING) {\r\n            this.#state = StopWatchStateOptions.PAUSED;\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    resume() {\r\n        if (this.#state === StopWatchStateOptions.PAUSED) {\r\n            this.#state = StopWatchStateOptions.RUNNING;\r\n            this.tick();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    finish(): void {\r\n        if (this.#id) {\r\n            clearTimeout(this.#id);\r\n            this.#id = undefined;\r\n        }\r\n        this.#current = 0;\r\n        this.#total = 0;\r\n    }\r\n    getState() {\r\n        return this.#state;\r\n    }\r\n}","import { is } from 'bpd-toolkit/dist/esm/index'\r\nimport * as React from 'react'\r\n\r\nexport function useResize(element: Element | Window, callback: (element: Element | Window) => void) {\r\n    function onResize() {\r\n        if (callback && element) {\r\n            callback(element)\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (element) {\r\n            window.addEventListener('resize', onResize)\r\n        }\r\n\r\n        return () => {\r\n            if (element) {\r\n                window.removeEventListener('resize', onResize)\r\n            }\r\n\r\n        }\r\n    }, [element])\r\n}\r\n\r\n\r\nexport function useIsFullscreen(element: Element) {\r\n    const resizeEl = useResize(element, onResize)\r\n    const [isFullscreen, setIsFullscreen] = React.useState(isElementFullscreen(element));\r\n\r\n    function onResize(element: Element) {\r\n        if (is(element))\r\n            setIsFullscreen(isElementFullscreen(element))\r\n    }\r\n\r\n    function isElementFullscreen(element: Element) {\r\n        if (!is(element)) {\r\n            return false;\r\n        }\r\n        return element && element.clientHeight >= ((screen.availHeight || screen.height) - 30) && element.clientWidth >= ((screen.availWidth || screen.width) - 30)\r\n    }\r\n\r\n    React.useEffect(() => { }, [isFullscreen])\r\n    return isFullscreen\r\n}\r\n","import * as React from 'react'\r\nimport { useAudioContext } from '../../../ui/hooks/AudioContext';\r\nimport { createArray } from '../../../core/helpers';\r\n\r\nexport interface TrainingSoundPlayerProps {\r\n    children?: JSX.Element | JSX.Element[];\r\n}\r\n\r\nexport function TrainingSoundPlayer(props: TrainingSoundPlayerProps) {\r\n    const countdownSound = React.useRef(null);\r\n    const exerciseSound = React.useRef(null);\r\n    const warmupSound = React.useRef(null);\r\n    const breakSound = React.useRef(null);\r\n    const cooldownSound = React.useRef(null);\r\n    const endSound = React.useRef(null);\r\n    const endSoundTrack = React.useRef(null);\r\n    const countdownSoundTrack = React.useRef(null);\r\n    const exerciseSoundTrack = React.useRef(null);\r\n    const warmupSoundTrack = React.useRef(null);\r\n    const breakSoundTrack = React.useRef(null);\r\n    const cooldownSoundTrack = React.useRef(null);\r\n    const AudioContext = useAudioContext();\r\n\r\n    function playSound(type: string) {\r\n        let element = undefined;\r\n        switch (type) {\r\n            case \"countdown\":\r\n                element = countdownSound.current;\r\n                break;\r\n            case \"end\":\r\n                element = endSound.current;\r\n                break;\r\n            case \"exercise\":\r\n                element = exerciseSound.current;\r\n                break;\r\n            case \"warmup\":\r\n                element = warmupSound.current;\r\n                break;\r\n            case \"break\":\r\n                element = breakSound.current;\r\n                break;\r\n            case \"cooldown\":\r\n                element = cooldownSound.current;\r\n                break;\r\n\r\n        }\r\n        if (element) {\r\n            element.currentTime = 0;\r\n            AudioContext.resume();\r\n            element.play();\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (countdownSound.current) {\r\n            countdownSoundTrack.current = AudioContext.createMediaElementSource(countdownSound.current);\r\n            countdownSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (warmupSound.current) {\r\n            warmupSoundTrack.current = AudioContext.createMediaElementSource(warmupSound.current);\r\n            warmupSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (exerciseSound.current) {\r\n            exerciseSoundTrack.current = AudioContext.createMediaElementSource(exerciseSound.current);\r\n            exerciseSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (breakSound.current) {\r\n            breakSoundTrack.current = AudioContext.createMediaElementSource(breakSound.current);\r\n            breakSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (cooldownSound.current) {\r\n            cooldownSoundTrack.current = AudioContext.createMediaElementSource(cooldownSound.current);\r\n            cooldownSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n        if (endSound.current) {\r\n            endSoundTrack.current = AudioContext.createMediaElementSource(endSound.current);\r\n            endSoundTrack.current.connect(AudioContext.destination);\r\n        }\r\n    }, [])\r\n\r\n    return (<>\r\n        {\r\n            props.children && createArray(props.children).map(child => {\r\n                return React.cloneElement(child, { playSound: playSound, ...child.props })\r\n            })\r\n        }\r\n        <audio ref={countdownSound} id=\"stopwatch-countdown\" src=\"/static/audio/stopwatch_countdown.mp3\" />\r\n        <audio ref={exerciseSound} id=\"stopwatch-exercise\" src=\"/static/audio/stopwatch_exercise.mp3\" />\r\n        <audio ref={warmupSound} id=\"stopwatch-warmup\" src=\"/static/audio/stopwatch_warmup.mp3\" />\r\n        <audio ref={breakSound} id=\"stopwatch-break\" src=\"/static/audio/stopwatch_break.mp3\" />\r\n        <audio ref={cooldownSound} id=\"stopwatch-cooldown\" src=\"/static/audio/stopwatch_cooldown.mp3\" />\r\n        <audio ref={endSound} id=\"stopwatch-cooldown\" src=\"/static/audio/stopwatch_end.mp3\" />\r\n    </>);\r\n}\r\n\r\n\r\nexport interface TrainingSoundPlayerItemProps {\r\n    playSound?: (value: string) => void;\r\n}","export function useAudioContext(): AudioContext {\r\n    const AudioContext = window.AudioContext;\r\n    return new AudioContext();\r\n}","import * as React from 'react'\r\nimport { IconBtnLabel } from './IconBtnLabel'\r\nexport interface IconButtonWithLabel {\r\n    label: string;\r\n    icon: string;\r\n    onClick?: () => void;\r\n    modifiers?: string;\r\n    labelModifier?: string;\r\n}\r\n\r\nexport function IconButtonWithLabel(props: IconButtonWithLabel) {\r\n    let classes = \"cui-button cui-icon\";\r\n    if (props.modifiers) {\r\n        classes += \" \" + props.modifiers;\r\n    }\r\n    return (<button className={classes} onClick={props.onClick} cui-icon={props.icon}><IconBtnLabel label={props.label} modifiers={props.labelModifier} /></button>);\r\n}\r\n\r\nexport interface IconBtnProps {\r\n    icon: string;\r\n    onClick?: () => void;\r\n    modifiers?: string;\r\n}\r\n\r\nexport function IconButton(props: IconBtnProps) {\r\n    let classes = \"cui-icon-button cui-icon\";\r\n    if (props.modifiers) {\r\n        classes += \" \" + props.modifiers;\r\n    }\r\n    return (<button className={classes} onClick={props.onClick} cui-icon={props.icon}></button>);\r\n}\r\n","import * as React from \"react\";\r\nimport { StopWatchPerformState, StopWatchStateOptions } from \"../../../api/stopwatch/stopwatch\";\r\nimport { IconButton } from \"../common/IconButton\";\r\n\r\ninterface CurrentStateControls {\r\n    startBtnCls: string;\r\n    startBtnText: string;\r\n    isPauseVisible: boolean;\r\n    pauseBtnText: string;\r\n    startBtnIcon: string;\r\n    pauseBtnIcon: string;\r\n}\r\n\r\n\r\nexport interface PerformerButtonBarProps {\r\n    onFullScreen: () => void;\r\n    onMute: () => void;\r\n    onPauseResume: () => void;\r\n    onStartStop: () => void;\r\n    playState: StopWatchPerformState;\r\n    soundIcon: string;\r\n    fullscreenIcon: string;\r\n}\r\n\r\nexport function PerformerButtonBar(props: PerformerButtonBarProps) {\r\n    const [controls, setControls] = React.useState<CurrentStateControls>({\r\n        startBtnText: \"Start\",\r\n        startBtnCls: \"cui-accent\",\r\n        pauseBtnText: \"Pause\",\r\n        isPauseVisible: false,\r\n        startBtnIcon: \"media_play\",\r\n        pauseBtnIcon: \"media_pause\"\r\n    })\r\n\r\n\r\n    function updatePlayStateControls(state: StopWatchPerformState) {\r\n        switch (state) {\r\n            case StopWatchStateOptions.RUNNING:\r\n                setControls({\r\n                    startBtnCls: \"cui-error\",\r\n                    startBtnIcon: \"media_stop\",\r\n                    startBtnText: \"Stop\",\r\n                    isPauseVisible: true,\r\n                    pauseBtnIcon: \"media_pause\",\r\n                    pauseBtnText: \"Pause\"\r\n                })\r\n                break;\r\n            case StopWatchStateOptions.PAUSED:\r\n                setControls({\r\n                    startBtnCls: \"cui-error\",\r\n                    startBtnIcon: \"media_stop\",\r\n                    startBtnText: \"Stop\",\r\n                    isPauseVisible: true,\r\n                    pauseBtnIcon: \"media_play\",\r\n                    pauseBtnText: \"Resume\"\r\n                })\r\n                break;\r\n            case StopWatchStateOptions.STOPPED:\r\n                setControls({\r\n                    startBtnCls: \"cui-accent\",\r\n                    startBtnIcon: \"media_play\",\r\n                    startBtnText: \"Start\",\r\n                    isPauseVisible: false,\r\n                    pauseBtnIcon: \"media_pause\",\r\n                    pauseBtnText: \"Pause\"\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        updatePlayStateControls(props.playState);\r\n        return () => { }\r\n    }, [props.playState])\r\n\r\n    return (<div className=\"training-control-btns\">\r\n        <a className=\"cui-icon-button cui-default cui-margin-small\" cui-icon={props.soundIcon} onClick={props.onMute}></a>\r\n        { controls.isPauseVisible && <IconButton icon={controls.pauseBtnIcon} onClick={props.onPauseResume} modifiers=\"cui-margin-small cui-large cui-default\" />}\r\n        <IconButton icon={controls.startBtnIcon} onClick={props.onStartStop} modifiers={\"cui-large cui-fill \" + controls.startBtnCls} />\r\n        <a className=\"cui-icon-button cui-default cui-margin-small\" cui-icon={props.fullscreenIcon} onClick={props.onFullScreen}></a>\r\n    </div >);\r\n}","import * as React from 'react'\r\nimport { calcDisplayTimer, getTextClassByActionType } from '../../../../core/helpers';\r\nimport { CountDownTimerProps } from './models';\r\n\r\n\r\n/**\r\n * CIRCLE countdowm\r\n * @param props \r\n */\r\nexport function CountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div className=\"rounded-countdown-timer\">\r\n            <p className=\"cui-margin-remove round-name\">{props.watchState.round?.name}</p>\r\n            <span className=\"cui-block cui-text-muted cui-text-small round-count\">Round {props.watchState.roundIdx + 1}/{props.watchState.roundTotal}</span>\r\n            <span className=\"cui-svg total-circle-progress\" cui-circle-progress={props.watchState.trainingProgress}>\r\n                <div className=\"\">\r\n                    <span className=\"cui-svg current-circle-progress\" cui-circle-progress={props.watchState.roundProgress}>\r\n                        <div>\r\n                            <span className=\"cui-svg countdown-circle-progress\" cui-circle-progress={props.watchState.progress}>\r\n                                <div>\r\n                                    <span className=\"cui-block cui-text-small\">{props.watchState.actionIdx + 1}</span>\r\n                                    <h1 className={\"cui-h1 cui-margin-remove \" + props.watchState.timerCls}>{props.watchState.timer}</h1>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </span>\r\n        </div>);\r\n}\r\n\r\nexport function NewCountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"cui-flex-center\">\r\n                <progress className=\"cui-progress cui-small cui-success width-100\" value={props.watchState.trainingProgress} max=\"100\"></progress>\r\n            </div>\r\n            <h1 className={\"cui-h1 countdown-timer-size \" + props.watchState.timerCls}>{props.watchState.timer}</h1>\r\n            <div className=\"cui-flex-center\">\r\n                <progress className=\"cui-progress cui-small width-100\" value={props.watchState.roundProgress} max=\"100\"></progress>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * SIMPLE\r\n * @param props \r\n */\r\nexport function SimpleCountDownTimer(props: CountDownTimerProps) {\r\n    return (\r\n        <div className=\"simple-countdown-timer\">\r\n            <p className=\"cui-margin-remove round-name\">{props.watchState.round?.name}</p>\r\n            <h3 className={\"cui-h2 cui-margin-remove action-name \" + getTextClassByActionType(props.watchState.action?.type)}>{props.watchState.action?.name}</h3>\r\n            <div>\r\n                <span className=\"cui-text-small round-count\">Round {props.watchState.roundIdx + 1}/{props.watchState.roundTotal}</span>\r\n                <span className=\"cui-margin-left cui-text-small action-index\">Action {props.watchState.actionIdx + 1}/{props.watchState.actionTotal}</span>\r\n            </div>\r\n\r\n            <h1 className={\"cui-h1 main-timer \" + props.watchState.timerCls}>{calcDisplayTimer(props.watchState.timer)}</h1>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { closeFullscreen, is, openFullscreen } from '../../../../node_modules/bpd-toolkit/dist/esm/index';\r\nimport { KeepScreenAwakeFeature } from '../../../api/screen/screen';\r\nimport { StopWatch, StopWatchPerformState, StopWatchStateOptions } from '../../../api/stopwatch/stopwatch';\r\nimport { calculateDuration, calculateProgress, getBgClassByType, getTotalDuration, showMessage, setPageTitle, setNavbarTitle } from '../../../core/helpers';\r\nimport { Round, StopwatchAction, Training } from '../../../core/models';\r\nimport { CompleteTrainingValidator } from '../../../core/validators';\r\nimport { NotFound } from '../common/NotFound';\r\nimport { useSettings } from '../../../ui/hooks/settings';\r\nimport { useIsFullscreen } from '../../../ui/hooks/useResize';\r\nimport { useIsLoading } from '../../../ui/hooks/loading';\r\nimport { TrainingSoundPlayer, TrainingSoundPlayerItemProps } from './TrainingSoundPlayer';\r\nimport { useStopwatch2 } from './hook';\r\nimport { PerformerButtonBar } from './PerformButtonBar';\r\nimport { getCountDownTimer } from './countdown/functions';\r\nimport { Loading } from '../common/Loading';\r\n;\r\n\r\ninterface TimeStateData {\r\n    time: number;\r\n    progress: number;\r\n    ct?: number;\r\n    total: number;\r\n}\r\n\r\ninterface PerfromTrainingState {\r\n    training: Training;\r\n}\r\n\r\ninterface StopwatchState {\r\n    timer: number;\r\n    state: StopWatchPerformState;\r\n    timerCls: string;\r\n    progress: number;\r\n    roundProgress: number;\r\n    trainingProgress: number;\r\n    roundIdx: number;\r\n    roundTotal: number;\r\n    actionIdx: number;\r\n    actionTotal: number;\r\n    round: Round,\r\n    action: StopwatchAction,\r\n    roundDuration: number,\r\n    totalDuration: number\r\n}\r\n\r\nexport default function PerfromTraining() {\r\n    const [state, setState] = React.useState<PerfromTrainingState>({\r\n        training: undefined\r\n    })\r\n\r\n    const [isLoading, setIsLoading] = useIsLoading(false);\r\n    const [notFound, setNotFound] = React.useState(false);\r\n\r\n    const { id } = useParams();\r\n\r\n    function onGetTraining(training: Training) {\r\n        if (!training) {\r\n            setNotFound(true);\r\n        }\r\n        let validation = new CompleteTrainingValidator().validate(training);\r\n        if (!validation.status) {\r\n            showMessage(\"Incorrect training\", `Training is not correct: ${validation.errors.join(\", \")}`)\r\n            return;\r\n        }\r\n        setIsLoading(false);\r\n        setState({\r\n            training: training\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(\"Perform training\");\r\n\r\n        const getTrainingSubscription = window.$flow.subscribe(\"GET_TRAINING\", { finish: onGetTraining })\r\n\r\n        if (id > -1) {\r\n            setIsLoading(true);\r\n            window.$flow.perform(\"GET_TRAINING\", id)\r\n        }\r\n        return () => {\r\n            window.$flow.unsubscribe(\"GET_TRAINING\", getTrainingSubscription.id)\r\n        }\r\n    }, [id])\r\n\r\n    if (isLoading) {\r\n        return <Loading />;\r\n    } else if (notFound) {\r\n        return <NotFound message=\"We couldn't find training\" classes=\"cui-height-1-1 cui-flex-center\" />;\r\n    } else if (!state.training) {\r\n        return <span></span>;\r\n    }\r\n    return (<PerformTrainingElement training={state.training} />);\r\n}\r\n\r\n\r\ninterface PerformTrainingElementProps {\r\n    training: Training;\r\n}\r\n\r\nfunction PerformTrainingElement(props: PerformTrainingElementProps) {\r\n\r\n    const [errorMessage, setErrorMessage] = React.useState(\"\");\r\n\r\n    function callError(message: string) {\r\n        setErrorMessage(message);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setPageTitle(\"Perform training\");\r\n        const wakeLock = new KeepScreenAwakeFeature();\r\n        if (props.training) {\r\n            setPageTitle(props.training.name);\r\n            setNavbarTitle(props.training.name);\r\n            try {\r\n                wakeLock.activate();\r\n            } catch (e) {\r\n                setErrorMessage(\"We could not activate feature to keep your device's screen awake during training performance\")\r\n            }\r\n\r\n        }\r\n\r\n        return () => {\r\n            wakeLock.release();\r\n        }\r\n    }, [props.training])\r\n    return (<>\r\n        <TrainingSoundPlayer>\r\n            <TrainingPerformer key={props.training?.id} callError={callError} training={props.training} />\r\n        </TrainingSoundPlayer>\r\n        {\r\n            is(errorMessage) &&\r\n            <div className=\"cui-position-float cui-position-bottom cui-position-right app-float-bottom cui-margin-right\"><span className=\"cui-icon cui-error cui-tooltip\" cui-icon=\"ban\" cui-tooltip={errorMessage}></span></div>\r\n        }\r\n    </>\r\n    );\r\n}\r\n\r\ninterface TrainingPerformerProps {\r\n    callError: (error: string) => void;\r\n    training: Training;\r\n}\r\n\r\nfunction TrainingPerformer(props: TrainingPerformerProps & TrainingSoundPlayerItemProps) {\r\n\r\n    const [stopwatch, setOnTick] = useStopwatch2();\r\n\r\n    const [watchState, setWatchState] = React.useState<StopwatchState>({\r\n        timer: 0,\r\n        state: StopWatchStateOptions.STOPPED,\r\n        timerCls: \"\",\r\n        progress: 100,\r\n        roundProgress: 100,\r\n        trainingProgress: 100,\r\n        roundIdx: 0,\r\n        roundTotal: 0,\r\n        actionIdx: 0,\r\n        actionTotal: 0,\r\n        roundDuration: 0,\r\n        totalDuration: 0,\r\n        action: undefined,\r\n        round: undefined,\r\n    })\r\n\r\n    const [settings, setSettings] = useSettings();\r\n\r\n\r\n    const stopWatchRef = React.useRef(stopwatch);\r\n    stopWatchRef.current = stopwatch;\r\n    const watchStateRef = React.useRef(watchState);\r\n    watchStateRef.current = watchState;\r\n    const settingsRef = React.useRef(settings);\r\n    settingsRef.current = settings;\r\n\r\n    const mainViewRef = React.useRef(null);\r\n\r\n    const isFullscreen = useIsFullscreen(mainViewRef.current);\r\n\r\n    function setDefaultWatchState(training: Training) {\r\n        let round = training.rounds[0];\r\n        let action = round.actions[0];\r\n        setWatchState({\r\n            ...watchState,\r\n            round: round,\r\n            roundIdx: 0,\r\n            roundTotal: training.rounds.length,\r\n            roundDuration: calculateDuration(round.actions),\r\n            actionIdx: 0,\r\n            action: action,\r\n            actionTotal: round.actions.length,\r\n            totalDuration: getTotalDuration(training)[1]\r\n        })\r\n    }\r\n\r\n    function setNextAction(): boolean {\r\n        let nextActionIdx = watchStateRef.current.actionIdx + 1;\r\n        if (watchStateRef.current.round.actions.length > nextActionIdx) {\r\n            let newAction = watchStateRef.current.round.actions[nextActionIdx]\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                actionIdx: nextActionIdx,\r\n                action: newAction,\r\n            })\r\n            return true;\r\n        }\r\n        let nextRoundIdx = watchStateRef.current.roundIdx + 1;\r\n        if (props.training.rounds.length > nextRoundIdx) {\r\n            let newRound = props.training.rounds[nextRoundIdx];\r\n            let newAction = newRound.actions[0];\r\n\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                actionIdx: 0,\r\n                action: newAction,\r\n                actionTotal: newRound.actions.length,\r\n                round: newRound,\r\n                roundIdx: nextRoundIdx,\r\n                roundDuration: calculateDuration(newRound.actions),\r\n            })\r\n            return true;\r\n        }\r\n        setDefaultWatchState(props.training);\r\n        return false;\r\n    }\r\n\r\n    function onStopwatchTick(currentTime: number, total: number, stopwatch: StopWatch): boolean {\r\n        let actionDuration = parseInt(watchStateRef.current.action.duration)//parseInt(currentRef.current.action.duration)\r\n        let ct = actionDuration - currentTime;\r\n        let progress = calculateProgress(currentTime, actionDuration)\r\n        if (currentTime === 0) {\r\n            playSound(watchStateRef.current.action.type);\r\n        }\r\n        if (ct > 0) {\r\n            // Normal tick\r\n            updateStopWatchState(stopwatch.getState(), {\r\n                time: ct,\r\n                progress: 100 - progress,\r\n                ct: currentTime,\r\n                total: total\r\n            })\r\n            // Start round end countdown\r\n            if (ct <= 2) {\r\n                playSound(\"countdown\");\r\n            }\r\n            return true;\r\n        } else {\r\n            // Next action\r\n            if (!setNextAction()) {\r\n                // End of training\r\n                playSound(\"end\");\r\n                updateStopWatchState(StopWatchStateOptions.STOPPED, {\r\n                    time: 0, progress: 100, ct: 0, total: 0\r\n                })\r\n                return false;\r\n            }\r\n            playSound(\"countdown\");\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING, { time: 0, progress: 0, ct: ct, total: total })\r\n            stopWatchRef.current.reset();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function playSound(name: string) {\r\n        if (!settingsRef.current.soundEnabled || !props.playSound || !is(name)) {\r\n            return\r\n        }\r\n\r\n        props.playSound(name);\r\n    }\r\n\r\n    function onStartClick() {\r\n        if (watchState.state === StopWatchStateOptions.STOPPED && stopwatch.start()) {\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING);\r\n        } else if (watchState.state !== StopWatchStateOptions.STOPPED && stopwatch.stop()) {\r\n            setDefaultWatchState(props.training);\r\n            updateStopWatchState(StopWatchStateOptions.STOPPED, { time: 0, progress: 100, ct: 0, total: 0 });\r\n\r\n        }\r\n    }\r\n\r\n    function onPauseClick() {\r\n        if (watchState.state === StopWatchStateOptions.RUNNING && stopwatch.pause()) {\r\n            updateStopWatchState(StopWatchStateOptions.PAUSED);\r\n        } else if (watchState.state === StopWatchStateOptions.PAUSED && stopwatch && stopwatch.resume()) {\r\n            updateStopWatchState(StopWatchStateOptions.RUNNING);\r\n        }\r\n    }\r\n\r\n    function updateStopWatchState(watchstate: StopWatchPerformState, timeData?: TimeStateData) {\r\n        if (!is(timeData) || timeData.time < 0) {\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                state: watchstate,\r\n            })\r\n        } else {\r\n            let roundProgress = calculateRoundProgress(timeData.ct);\r\n            let trainginProgress = calculateTrainingProgress(timeData.total);\r\n            setWatchState({\r\n                ...watchStateRef.current,\r\n                timer: timeData.time,\r\n                timerCls: getTimerCls(timeData.time, watchstate),\r\n                state: watchstate,\r\n                progress: timeData.progress,\r\n                roundProgress: roundProgress,\r\n                trainingProgress: trainginProgress\r\n            })\r\n        }\r\n    }\r\n\r\n    function calculateRoundCurrentTime(ct: number) {\r\n        return watchStateRef.current.round.actions.reduce<number>((result: number, act: StopwatchAction, idx: number) => {\r\n            if (idx < watchStateRef.current.actionIdx) {\r\n                return result + parseInt(act.duration);\r\n            }\r\n            return result;\r\n        }, 0) + ct;\r\n    }\r\n\r\n    function calculateRoundProgress(ct: number) {\r\n        return 100 - calculateProgress(calculateRoundCurrentTime(ct), watchStateRef.current.roundDuration);\r\n    }\r\n\r\n    function calculateTrainingProgress(ct: number) {\r\n        return 100 - calculateProgress(ct, watchStateRef.current.totalDuration);\r\n    }\r\n\r\n    function getTimerCls(timer: number, state: StopWatchPerformState): string {\r\n        return state === StopWatchStateOptions.RUNNING && timer >= 0 && timer < 3 ? \"cui-text-warning timer-blink-animation\" : \"\";\r\n    }\r\n\r\n    function getBackgroundClass(action: StopwatchAction) {\r\n        return !is(action) ? \"\" : getBgClassByType(action.type);\r\n    }\r\n\r\n    function onFullScreen() {\r\n        if (!mainViewRef.current) {\r\n            return;\r\n        }\r\n        if (isFullscreen) {\r\n            closeFullscreen();\r\n        }\r\n        openFullscreen(mainViewRef.current);\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n        if (props.training) {\r\n            setDefaultWatchState(props.training);\r\n            setOnTick(onStopwatchTick);\r\n        }\r\n\r\n        return () => {\r\n            if (stopWatchRef.current) {\r\n                stopWatchRef.current.stop();\r\n            }\r\n        }\r\n    }, [props.training])\r\n\r\n    return (<div className=\"stopwatch-layout-content cui-background-default\" ref={mainViewRef}>\r\n        <div className={\"cui-height-1-1 cui-overflow-y-auto cui-flex cui-center cui-middle \" + getBackgroundClass(watchState.action)} >\r\n            <div className=\"stopwatch-content-width cui-text-center cui-flex-center animation-fade-in\">\r\n                <div>\r\n                    {getCountDownTimer(settings.countdownView, watchState)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <PerformerButtonBar playState={watchState.state}\r\n            soundIcon={settings.soundEnabled ? \"speaker\" : \"volume_muted\"}\r\n            fullscreenIcon={isFullscreen ? \"shrink\" : \"expand\"}\r\n            onFullScreen={onFullScreen}\r\n            onStartStop={onStartClick}\r\n            onPauseResume={onPauseClick}\r\n            onMute={() => {\r\n                setSettings({\r\n                    ...settings,\r\n                    soundEnabled: !settings.soundEnabled\r\n                })\r\n            }}\r\n        />\r\n    </div>);\r\n}\r\n\r\n","import * as React from 'react'\r\n\r\nexport function useIsLoading(init: boolean): [boolean, (val: boolean) => void] {\r\n    const loading = React.useRef(init);\r\n\r\n    function setIsLoading(flag: boolean) {\r\n        console.log(\"Flag: \" + flag + \", Loading: \" + loading)\r\n        if (loading.current != flag) {\r\n            loading.current = flag;\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        loading.current = init;\r\n    }, [])\r\n    return [loading.current, setIsLoading];\r\n}\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n// import { Training } from \"../../../core/models\";\r\nimport { StopWatch, StopwatchCallback, StopWatchStateOptions } from \"../../../api/stopwatch/stopwatch\";\r\n// import { StopwatchState } from \"./PerformTraining\";\r\n\r\n// export function useStopwatch(callback: StopwatchCallback): StopWatch {\r\n//     const [stopwatch, setStopwatch] = useState(new StopWatch());\r\n\r\n//     React.useEffect(() => {\r\n//         console.log(\"Stopwatch hook init\")\r\n\r\n//         let stop = new StopWatch();\r\n//         stop.onTick(callback);\r\n//         return () => {\r\n//             console.log(\"Stopwatch hook end\")\r\n//         }\r\n//     }, [])\r\n//     return stopwatch;\r\n// }\r\n\r\nexport function useStopwatch2(): [StopWatch, (callback: StopwatchCallback) => void] {\r\n    const [stopwatch, setStopwatch] = React.useState(new StopWatch());\r\n\r\n    React.useEffect(() => {\r\n        console.log(\"Stopwatch hook init\")\r\n        return () => {\r\n            console.log(\"Stopwatch hook end\")\r\n        }\r\n    }, [])\r\n    return [stopwatch, (callback: StopwatchCallback) => {\r\n        stopwatch.onTick(callback);\r\n        setStopwatch(stopwatch);\r\n    }];\r\n}\r\n\r\n// export interface PerformTrainingHookObject {\r\n//     current: StopwatchState,\r\n//     pause: () => void;\r\n//     resume: () => void;\r\n//     start: () => void;\r\n//     stop: () => void;\r\n// }\r\n\r\n\r\n// export function usePerformTraining(training: Training): PerformTrainingHookObject {\r\n//     const [stopWatch, setOnTick] = useStopwatch2();\r\n//     const [watchState, setWatchState] = React.useState<StopwatchState>({\r\n//         timer: \"-\",\r\n//         state: StopWatchStateOptions.STOPPED,\r\n//         timerCls: \"\",\r\n//         progress: 100,\r\n//         roundProgress: 100,\r\n//         trainingProgress: 100,\r\n//         roundIdx: 0,\r\n//         roundTotal: 0,\r\n//         actionIdx: 0,\r\n//         actionTotal: 0,\r\n//         roundDuration: 0,\r\n//         totalDuration: 0,\r\n//         action: undefined,\r\n//         round: undefined,\r\n//     })\r\n\r\n\r\n//     React.useEffect(() => {\r\n\r\n//     }, [watchState])\r\n\r\n//     return {\r\n\r\n//     }\r\n// }","import * as React from \"react\";\r\nimport { StopwatchState } from \"../PerformTraining\";\r\nimport { SimpleCountDownTimer, CountDownTimer, NewCountDownTimer } from \"./CountdownTimers\";\r\n\r\nexport function getCountDownTimer(type: string, watchState: StopwatchState): JSX.Element {\r\n    switch (type) {\r\n        case \"simple\":\r\n            return <SimpleCountDownTimer watchState={watchState} />\r\n        case \"circle\":\r\n            return <CountDownTimer watchState={watchState} />;\r\n        case \"test\":\r\n            return <NewCountDownTimer watchState={watchState} />;\r\n        default:\r\n            return <div></div>\r\n    }\r\n}"],"sourceRoot":""}